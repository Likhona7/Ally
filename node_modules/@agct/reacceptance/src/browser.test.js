import Browser from './browser';
import React from 'react';
import chai, { expect } from 'chai';
import chaiAsPromised from 'chai-as-promised';

chai.use(chaiAsPromised);

import sinonChai from 'sinon-chai';
chai.use(sinonChai);

class MockStore {
  dispatch(action) {
    this.lastAction = action;
  }
}

const delayPromise = (duration, ...args) =>
  new Promise((resolve) => setTimeout(
    () => resolve(...args),
    duration
  ));

describe('Browser', () => {
  let browser;

  afterEach(() => {
    if (browser && browser.shutdown) { browser.shutdown(); }
  });

  describe('constructor', () => {
    it('sets the store if provided', () => {
      const mockStore = new MockStore();
      browser = new Browser(null, mockStore);
      expect(browser.store).to.equal(mockStore);
      return browser;
    });

    it('sets up an instance of pretender', () => {
      browser = new Browser();
      expect(browser.bff).to.be.running;
      return browser;
    });
  });

  describe('mount', () => {
    it('mounts the root node if provided', () => {
      const node = (<div></div>);
      browser = new Browser(node);
      browser.mount();
      expect(browser.rootNode).to.exist;
      expect(browser.rootNode.component.isMounted()).to.be.true;
      return browser;
    });

    it('renders the application in a target element', () => {
      const targetElement = document.createElement('div');
      targetElement.id = 'target-container';
      document.body.appendChild(targetElement);

      const node = (<div>EXAMPLE</div>);
      browser = new Browser(node);
      browser.mount(targetElement);

      expect(targetElement.innerHTML).to.contain('EXAMPLE');
    });

    it('appends the target element to the DOM if not appended', () => {
      const targetElement = document.createElement('div');
      targetElement.id = 'target-container';

      const node = (<div>EXAMPLE</div>);
      browser = new Browser(node);
      browser.mount(targetElement);

      expect(document.querySelectorAll('#target-container')).to.have.length(1);
    });
  });

  describe('shutdown', () => {
    it('shuts down the pretender instance', () => {
      const _browser = new Browser();
      _browser.shutdown();

      expect(_browser.bff).to.not.be.running;

      return _browser;
    });


    it('unmounts the root node if present', () => {
      const onUnmount = sinon.spy();
      class MockNode extends React.Component {
        constructor(props) {
          super(props);
          this.componentWillUnmount = onUnmount;
        }
        render() {
          return (<div></div>);
        }
      }

      const _browser = new Browser(<MockNode />);
      _browser.mount();
      _browser.shutdown();
      expect(onUnmount).to.have.been.calledOnce;

      return _browser;
    });
  });

  describe('andThen', () => {
    it('handles Promise return values appropriately', () => {
      browser = new Browser();
      const startTime = new Date();
      return browser
        .andThen(() => delayPromise(200))
        .andThen(() => {
          const now = new Date();
          expect(now - startTime).to.be.greaterThan(200);
        });
    });

    it('returns the browser instance', () => {
      browser = new Browser();

      const result = browser.andThen(() => true);
      expect(result).to.equal(browser);
    });

    it('rejects for exception return values', () => {
      browser = new Browser();
      return expect(browser.andThen(() => { throw new Error('My Error'); }))
        .to.eventually.be.rejectedWith('My Error');
    });

    it('rejects for rejected promise return values', () => {
      browser = new Browser();
      return expect(browser.andThen(() => Promise.reject(new Error('My Error'))))
        .to.eventually.be.rejectedWith('My Error');
    });
  });

  describe('then', () => {
    it('resolves after the promise chain', () => {
      browser = new Browser();
      const startTime = new Date();
      const done = () => {
        const now = new Date();
        expect(now - startTime).to.be.greaterThan(200);
      };
      return browser
        .andThen(() => delayPromise(100))
        .andThen(() => delayPromise(100))
        .then(done);
    });

    it('behaves like a promise then', () => {
      browser = new Browser();
      const done = (result) => {
        expect(result).to.eql('Example');
      };
      return browser
        .andThen(() => delayPromise(100))
        .andThen(() => delayPromise(100))
        .andThen(() => 'Example')
        .then(done);
    });

    it('emulates failed promises correctly', (done) => {
      browser = new Browser();
      browser.andThen(() => { throw new Error('My Error'); });
      browser.then(undefined, (err) => {
        expect(err.message).to.eql('My Error');
        done();
      });
    });
  });

  describe('call', () => {
    beforeEach(() => {
      browser = new Browser();
    });

    it('calls the function with the browser as its context', () => {
      function helper() {
        expect(this).to.eql(browser);
      }
      browser.call(helper);
    });

    it('passes any arguments to the function', () => {
      function helper(one, two, three) {
        expect(one).to.eql(1);
        expect(two).to.eql(2);
        expect(three).to.eql(3);
      }

      browser.call(helper, 1, 2, 3);
    });

    it('returns the result of the function', () => {
      const helper = () => 'RESULT';
      expect(browser.call(helper)).to.eql('RESULT');
    });
  });

  describe('_', () => {
    beforeEach(() => {
      browser = new Browser();
    });

    function helper(one, two, three) {
      this.testString = `${one}-${two}-${three}`;
      return this;
    }

    it('is an alias for call', () => {
      expect(browser._(helper, 1, 2, 3))
        .to.eql(browser.call(helper, 1, 2, 3));
    });
  });

  describe('use', () => {
    function example() {
      return this;
    }

    it('extends the browser with each passed function', () => {
      browser = new Browser();
      browser.use(example);

      expect(browser.example).to.exist;

      return browser;
    });

    it('binds each given function to the browser', () => {
      browser = new Browser();
      browser.use(example);

      expect(browser.example()).to.equal(browser);

      return browser;
    });
  });

  describe('fixture', () => {
    const fixtureObject = {
      url: '/stuff',
      status: 200,
      body: {
        example: 'EXAMPLE',
      },
    };

    const fixtureObjectTwo = {
      url: '/stuff',
      status: 202,
      body: {
        example: 'EXAMPLE_2',
      },
    };

    it('respects the promise chain', () => {
      browser = new Browser();
      return browser
        .fixture(fixtureObject)
        .andThen(() => delayPromise(200))
        .andThen((root, store, bff) =>
          expect(bff.__responses['/stuff-GET'].body).to.eql(fixtureObject.body)
        )
        .fixture(fixtureObjectTwo)
        .andThen((root, store, bff) =>
          expect(bff.__responses['/stuff-GET'].body).to.eql(fixtureObjectTwo.body)
        );
    });
  });
});
