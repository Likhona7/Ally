import { expect } from 'chai';
import { loadFixture } from './response-object';
import Pretender from 'pretender';
import request from 'superagent';


describe('loadFixture', () => {
  const fixtureObject = {
    url: '/stuff?id=1',
    status: 200,
    body: {
      example: 'EXAMPLE',
    },
  };

  const fixtureObjectTwo = {
    url: '/stuff?id=2',
    status: 202,
    body: {
      example: 'EXAMPLE_2',
    },
  };

  const postFixtureObject = {
    url: '/stuff',
    status: 200,
    method: 'POST',
    body: {
      example: 'EXAMPLE_2',
    },
  };
  let pretender;

  beforeEach(() => { pretender = new Pretender(); });
  afterEach(() => { pretender.shutdown(); });

  it('mocks the response body as expected', () => {
    loadFixture(pretender, fixtureObject);

    const req = request.get('/stuff?id=1');
    return req.then((resp) => {
      expect(resp.body).to.eql(fixtureObject.body);
    });
  });

  it('mocks the response status correctly', () => {
    loadFixture(pretender, fixtureObjectTwo);

    const req = request.get('/stuff?id=2');
    return req.then((resp) => {
      expect(resp.status).to.eql(fixtureObjectTwo.status);
    });
  });

  it('mocks the correct method', () => {
    loadFixture(pretender, postFixtureObject);

    const req = request.post('/stuff');
    return req.then((resp) => {
      expect(resp.body).to.eql(postFixtureObject.body);
      expect(resp.status).to.eql(postFixtureObject.status);
    });
  });

  /* eslint-disable no-console */
  it('throws an error on requests with no responses', () => {
    loadFixture(pretender, fixtureObject);
    const realError = console.error;
    console.error = () => {};

    return request.get('/stuff?id=2')
      .then(() => {})
      .catch((error) => {
        expect(error.message)
        .to.eql('Pretender intercepted GET /stuff?id=2 but encountered an error: ' +
          'Unmocked Request\n' +
          'Unhandled Url\n' +
          '\t/stuff?id=2-GET\n' +
          'Mocked Urls:\n' +
          '\t/stuff?id=1-GET');
        console.error = realError;
      });
  });
  /* eslint-enable no-console */

  it('differentiates between query strings', () => {
    loadFixture(pretender, fixtureObject);
    loadFixture(pretender, fixtureObjectTwo);

    const req = request.get('/stuff?id=2');
    return req.then((resp) => {
      expect(resp.body).to.eql(fixtureObjectTwo.body);
    });
  });
});
