import _ from 'lodash';
import Browser from './browser';

function wrapActions(context, actions) {
  return _.mapValues(actions, (action) => (...args) => {
    action.apply(context, args);
    return context;
  });
}

function deactivatePage(context, pageObject) {
  const _context = context;
  _.keys(pageObject.actions).forEach((key) => delete _context[key]);
}

export function activatePage(context, pageObject) {
  const _context = context;
  if (_context.activePage) { deactivatePage(context, context.activePage); }

  const conflictingKeys = _.intersection(_.keys(_context), _.keys(pageObject.actions));
  if (conflictingKeys.length > 0) {
    throw new Error(`Couldn't load page object. Browser already has own function: ${conflictingKeys.join(',')}`);
  }

  _context.activePage = pageObject;
  Object.assign(_context, wrapActions(context, pageObject.actions));
}

export default class PageObjectBrowser extends Browser {
  visit(pageOrPath, ...args) {
    if (_.isString(pageOrPath)) {
      super.visit(pageOrPath, ...args);
      return this;
    }

    if (!pageOrPath.path) {
      throw new Error('Can\'t visit page object with no path');
    }

    activatePage(this, pageOrPath);
    super.visit(pageOrPath.path, ...args);
    return this;
  }

  page(page) {
    if (!page.actions) {
      throw new Error('Can\'t load page object with no actions');
    }

    activatePage(this, page);
    return this;
  }
}
