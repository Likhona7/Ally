import PageObjectBrowser, { activatePage as pageObjectActivatePage } from './page-object-browser';
import { expect } from 'chai';
import { push } from 'react-router-redux';

class MockStore {
  dispatch(action) {
    this.lastAction = action;
  }
}

const pageOne = {
  path: '/one',
  elements: { body: 'body' },
  actions: {
    doOne() {
      this.didOne = true;
    },
  },
};

const pageTwo = {
  path: '/two',
  elements: { body: 'body' },
  actions: {
    doTwo() {
      this.didTwo = true;
    },
  },
};

describe('activatePage', () => {
  let browser;
  let activatePage;
  beforeEach(() => {
    browser = {};
    activatePage = (description) => pageObjectActivatePage(browser, description);
  });

  it('throws an error if any actions result in a naming conflict', () => {
    browser.doOne = () => true;

    expect(() => {
      activatePage(pageOne);
    }).to.throw('Couldn\'t load page object. Browser already has own function: doOne');
  });

  it('removes any existing page actions from the context', () => {
    activatePage(pageOne);
    activatePage(pageTwo);

    expect(browser.doOne).to.not.exist;
  });
});

describe('PageObjectBrowser', () => {
  let mockStore;
  let browser;

  const page = {
    path: '/example',
    actions: {
      doSomething() {
        return true;
      },
    },
  };

  beforeEach(() => {
    mockStore = new MockStore();
  });

  afterEach(() => {
    if (browser && browser.shutdown) { browser.shutdown(); }
  });

  describe('visit', () => {
    it('navigates to the path property of the argument if it exists', () => {
      browser = new PageObjectBrowser(null, mockStore);

      return browser
        .visit(page)
        .andThen(() => expect(mockStore.lastAction).to.eql(push('/example')));
    });

    it('navigates to the argument if no path property exists', () => {
      browser = new PageObjectBrowser(null, mockStore);

      browser
        .visit('/example')
        .andThen(() => expect(mockStore.lastAction).to.eql(push('/example')));
      return browser;
    });

    it('activates the page object if it has actions', () => {
      browser = new PageObjectBrowser(null, mockStore);

      browser
        .visit(page)
        .andThen(() => expect(browser.doSomething).to.exist);
      return browser;
    });

    it('behaves properly in the promise chain', () => {
      browser = new PageObjectBrowser(null, mockStore);
      const pageThree = {
        path: '/',
        actions: {
          setState() {
            return this.andThen(() => { browser.test = 'example'; });
          },
        },
      };

      const pageFour = {
        path: '/',
        actions: {
          assertState() {
            return this.andThen(() => expect(browser.test).to.eql('example'));
          },
        },
      };

      return browser
        .visit(pageThree)
        .setState()
        .visit(pageFour)
        .assertState();
    });
  });

  describe('page', () => {
    it('activates the given page object', () => {
      browser = new PageObjectBrowser();

      browser
        .page(page)
        .andThen(() => expect(browser.doSomething).to.exist);

      return browser;
    });

    it('does not navigate', () => {
      browser = new PageObjectBrowser(null, mockStore);
      let stateBeforePage;

      browser
        .andThen((root, store) => { stateBeforePage = store.lastAction; })
        .page(page)
        .andThen((root, store) => expect(store.lastAction).to.eql(stateBeforePage));

      return browser;
    });

    it('de-activates any previously active page object', () => {
      browser = new PageObjectBrowser();

      browser
        .page(page)
        .page({ actions: {} })
        .andThen(() => expect(browser.doSomething).to.not.exist);

      return browser;
    });

    it('raises an error if argument has no actions', () => {
      browser = new PageObjectBrowser();

      expect(() => {
        browser.page({});
      }).to.throw('Can\'t load page object with no actions');

      return browser;
    });
  });
});
