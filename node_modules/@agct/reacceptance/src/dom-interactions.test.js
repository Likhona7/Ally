import React from 'react';
import * as DOM from './dom-interactions';
import chai, { expect } from 'chai';
import { mount } from 'enzyme';
import chaiAsPromised from 'chai-as-promised';

chai.use(chaiAsPromised);

function mountRootNode(rootNode) {
  const targetElement = document.createElement('div');
  targetElement.id = 'app-container';
  document.body.appendChild(targetElement);
  return mount(rootNode, { attachTo: targetElement });
}

class MockElement extends React.Component {
  constructor({ wait }) {
    super();
    this.state = {};
    setTimeout(() => { this.setState({ done: true }); }, wait);
  }

  render() {
    return (<div id="root">{this.state.done && <div id="target" />}</div>);
  }
}

describe('waitForElement', () => {
  it('returns a promise that resolves with the element when/if it exists', () => {
    const rootNode = <MockElement wait={300} />;
    const wrapper = mountRootNode(rootNode);
    return DOM
      .waitForElement(wrapper, '#target')
      .then(() => expect(wrapper.find('#target')).to.exist);
  });

  it('times out after timeout period', () => {
    const rootNode = <MockElement timeout={300} />;
    const wrapper = mountRootNode(rootNode);
    return expect(DOM.waitForElement(wrapper, '#target', 10))
     .to.be.rejectedWith('Element could not be found for #target.');
  });
});
