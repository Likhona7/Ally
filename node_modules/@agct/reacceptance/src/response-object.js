import { unhandledRequest } from './browser';
function persistResponse(pretender, { url, body, method, status }) {
  const _pretender = pretender;
  const responses = pretender.__responses || {};
  responses[`${url}-${method}`] = { body, status };
  _pretender.__responses = responses;
}

function retrieveResponse(pretender, request) {
  const { url, method } = request;

  if (!pretender.__responses[`${url}-${method}`]) {
    unhandledRequest(request.method, request.url, pretender);
  }

  const { body, status } = pretender.__responses[`${url}-${method}`];
  return [status, { 'content-type': 'application/json' }, JSON.stringify(body)];
}

export function loadFixture(pretender, { url, body, method = 'GET', status = 200 }) {
  const [path] = url.split('?');
  persistResponse(pretender, { url, body, method, status });
  pretender[method.toLowerCase()](path, (request) => retrieveResponse(pretender, request));
}

export function fixture(fixtureObject) {
  return this.andThen(() => loadFixture(this.bff, fixtureObject));
}
