import React, { PropTypes } from 'react';
import chai, { expect } from 'chai';
import { shallow } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';

import MoneyDecorative from 'components/Money/MoneyDecorative';

chai.use(chaiEnzyme());


describe('MoneyDecorative component', () => {
  it('sets text for symbol', () => {
    const wrapper = shallow(<MoneyDecorative amount={123456.789} currencyCode="ZAR" useSymbol />);
    expect(wrapper.find('.money__symbol')).to.have.text('R');
    expect(wrapper.find('.money__units')).to.have.text(' 123 456');
    expect(wrapper.find('.money__decimal')).to.have.text('.');
    expect(wrapper.find('.money__cents')).to.have.text('79');
  });

  it('sets text for code', () => {
    const wrapper = shallow(<MoneyDecorative amount={123456.789} currencyCode="ZAR" useSymbol={false} />);
    expect(wrapper.find('.money__symbol')).to.have.text('ZAR');
    expect(wrapper.find('.money__units')).to.have.text(' 123 456');
    expect(wrapper.find('.money__decimal')).to.have.text('.');
    expect(wrapper.find('.money__cents')).to.have.text('79');
  });

  it('sets text for inversion', () => {
    const wrapper = shallow(<MoneyDecorative amount={-123456.789} currencyCode="ZAR" useSymbol={false} invertNumber />);
    expect(wrapper.find('.money__prefix')).to.have.text('-');
    expect(wrapper.find('.money__symbol')).to.have.text('ZAR');
    expect(wrapper.find('.money__units')).to.have.text(' 123 456');
    expect(wrapper.find('.money__decimal')).to.have.text('.');
    expect(wrapper.find('.money__cents')).to.have.text('79');
  });

  it('sets text for inversion: small value', () => {
    const wrapper = shallow(<MoneyDecorative amount={-0.789} currencyCode="ZAR" useSymbol invertNumber />);
    expect(wrapper.find('.money__prefix')).to.have.text('-');
    expect(wrapper.find('.money__symbol')).to.have.text('R');
    expect(wrapper.find('.money__units')).to.have.text(' 0');
    expect(wrapper.find('.money__decimal')).to.have.text('.');
    expect(wrapper.find('.money__cents')).to.have.text('79');
  });

  it('should have prop types defined', () => {
    expect(MoneyDecorative.propTypes.amount).to.equal(PropTypes.number.isRequired);
    expect(MoneyDecorative.propTypes.currencyCode).to.equal(PropTypes.string.isRequired);
    expect(MoneyDecorative.propTypes.useSymbol).to.equal(PropTypes.bool);
  });
});
