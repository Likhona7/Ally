import React from 'react';
import chai, { expect } from 'chai';
import { shallow, mount } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import sinonChai from 'sinon-chai';

import { TABS_VARIANT_ARROW, TABS_VARIANT_UNDERLINE } from './Variants';
import TabsMenuSlider from './TabsMenuSlider';

chai.use(chaiEnzyme());
chai.use(sinonChai);


const props = {
  tabs: [
    {
      title() { return 'tab 1'; },
      content() { return 'tab 1 content'; },
    },
    {
      title() { return 'tab 2'; },
      content() { return 'tab 2 content'; },
    },
    {
      title() { return 'tab 3'; },
      content() { return 'tab 3 content'; },
    },
    {
      title() { return 'tab 4'; },
      content() { return 'tab 4 content'; },
    },
  ],
  activeTabIndex: 0,
  activeTabContent: 'tab 1 content',
  onChange() {},
};
const wrapper = shallow(
  <TabsMenuSlider
    tabs={props.tabs.map(tab => tab.header)}
    activeTabIndex={props.activeTabIndex}
    activeTabContent={props.activeTabContent}
    onChange={props.onChange}
  />
);

describe('TabsMenuSlider component', () => {
  it('renders tabs', () => {
    expect(wrapper.find('.tabs-slider__tab')).to.have.length(props.tabs.length);
  });

  it('renders active tab', () => {
    expect(wrapper.find('.tabs-slider__tab.is-active')).to.have.length(1);
    expect(wrapper.find('.tabs-slider__tab').at(0)).to.have.className('is-active');
    expect(wrapper.find('.tabs-slider__detail').text()).to.equal(props.tabs[0].content());
  });

  it('renders variants', () => {
    const wrapperArrow = shallow(
      <TabsMenuSlider
        tabsVariant={TABS_VARIANT_ARROW}
        tabs={props.tabs.map(tab => tab.header)}
        activeTabIndex={props.activeTabIndex}
        activeTabContent={props.activeTabContent}
        onChange={props.onChange}
      />
    );
    const wrapperUnderline = shallow(
      <TabsMenuSlider
        tabsVariant={TABS_VARIANT_UNDERLINE}
        tabs={props.tabs.map(tab => tab.header)}
        activeTabIndex={props.activeTabIndex}
        activeTabContent={props.activeTabContent}
        onChange={props.onChange}
      />
    );
    expect(wrapperArrow.find('.tabs-slider__tabs--down-arrow')).to.exist;
    expect(wrapperUnderline.find('.tabs-slider__tabs--underline')).to.exist;
  });

  describe('next and prev', () => {
    let activePage;
    const sandbox = sinon.sandbox.create();
    const spyNextPage = sandbox.spy(TabsMenuSlider.prototype, 'nextPage');
    const spyPrevPage = sandbox.spy(TabsMenuSlider.prototype, 'prevPage');
    const wrapperMount = mount(
      <TabsMenuSlider
        tabs={props.tabs.map(tab => tab.header)}
        activeTabIndex={props.activeTabIndex}
        activeTabContent={props.activeTabContent}
        onChange={props.onChange}
      />
    );

    wrapperMount.find('.tabs-slider__nav--next').simulate('click');
    expect(spyNextPage).to.have.been.calledOnce;
    activePage = wrapperMount.state('activePage');
    expect(activePage).to.equal(1);

    wrapperMount.find('.tabs-slider__nav--next').simulate('click');
    activePage = wrapperMount.state('activePage');
    expect(activePage).to.equal(2);

    wrapperMount.find('.tabs-slider__nav--prev').simulate('click');
    expect(spyPrevPage).to.have.been.calledOnce;
    activePage = wrapperMount.state('activePage');
    expect(activePage).to.equal(1);
    sandbox.restore();
  });

  describe('actions - onChange', () => {
    const sandbox = sinon.sandbox.create();
    const spyOnChange = sandbox.spy(props, 'onChange');
    const wrapperMount = mount(
      <TabsMenuSlider
        tabs={props.tabs.map(tab => tab.header)}
        activeTabIndex={props.activeTabIndex}
        activeTabContent={props.activeTabContent}
        onChange={props.onChange}
      />
    );

    wrapperMount.find('.tabs-slider__tab').at(2).simulate('click');
    expect(spyOnChange).to.have.been.calledOnce;
    expect(spyOnChange).to.have.been.calledWith(2);
    sandbox.restore();
  });
});
