import React, { PropTypes } from 'react';
import classnames from 'classnames';

import { attr as qa } from '@agct/reacceptance/src/qa';

import { SMALL, MEDIUM, LARGE, TABS_LARGE, TABS_MEDIUM, TABS_SMALL, TABS_DEFAULT } from './Breakpoints';
import { TABS_VARIANT_ARROW, TABS_VARIANT_UNDERLINE } from './Variants';

let mediaMatchLarge;
let mediaMatchMedium;
let mediaMatchSmall;

class TabsMenuSlider extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      displayArrows: false,
      activePage: 0,
      tabsPerPage: 0,
      tabWidth: null,
    };

    mediaMatchLarge = window.matchMedia(`screen and (min-width: ${LARGE})`);
    mediaMatchMedium = window.matchMedia(`screen and (min-width: ${MEDIUM})`);
    mediaMatchSmall = window.matchMedia(`screen and (min-width: ${SMALL})`);

    mediaMatchLarge.addListener(() => this.viewportChangeLarge(this.props, mediaMatchLarge));
    mediaMatchMedium.addListener(() => this.viewportChangeMedium(this.props, mediaMatchMedium));
    mediaMatchSmall.addListener(() => this.viewportChangeSmall(this.props, mediaMatchSmall));
  }

  componentDidMount() {
    this.viewportChangeLarge(this.props, mediaMatchLarge);
  }

  componentWillReceiveProps(nextProps) {
    this.viewportChangeLarge(nextProps, mediaMatchLarge);
  }


  // viewport based methods

  setTabWidth(tabsPerPage, viewportSpecificTabsPerPage) {
    this.setState({
      tabsPerPage: viewportSpecificTabsPerPage,
      tabWidth: parseFloat(100 / viewportSpecificTabsPerPage).toPrecision(5),
    });
  }

  setActivePage(tabs, viewportSpecificTabsPerPage) {
    if (viewportSpecificTabsPerPage + this.state.activePage > tabs.length) {
      this.setState({
        activePage: Math.max(0, tabs.length - viewportSpecificTabsPerPage),
      });
    }
  }

  setActivePageMobile(activeTabIndex) {
    const activePage = activeTabIndex >= 0 ? activeTabIndex : 0;
    this.setState({
      activePage,
    });
  }


  // match viewports

  viewportChangeLarge({ tabsPerPage, tabs, activeTabIndex }, viewport) {
    if (!viewport.matches) return this.viewportChangeMedium({ tabsPerPage, tabs, activeTabIndex }, mediaMatchMedium);
    this.setTabWidth(tabsPerPage, tabsPerPage.tabsLarge);
    this.setActivePage(tabs, tabsPerPage.tabsLarge);

    if (tabs.length > tabsPerPage.tabsLarge) return this.showArrows();
    return this.hideArrows();
  }

  viewportChangeMedium({ tabsPerPage, tabs, activeTabIndex }, viewport) {
    if (!viewport.matches) return this.viewportChangeSmall({ tabsPerPage, tabs, activeTabIndex }, mediaMatchSmall);
    this.setTabWidth(tabsPerPage, tabsPerPage.tabsMedium);
    this.setActivePage(tabs, tabsPerPage.tabsMedium);

    if (tabs.length > tabsPerPage.tabsMedium) return this.showArrows();
    return this.hideArrows();
  }

  viewportChangeSmall({ tabsPerPage, tabs, activeTabIndex }, viewport) {
    if (!viewport.matches) return this.viewportMobile({ tabsPerPage, tabs, activeTabIndex });
    this.setTabWidth(tabsPerPage, tabsPerPage.tabsSmall);
    this.setActivePage(tabs, tabsPerPage.tabsSmall);

    if (tabs.length > tabsPerPage.tabsSmall) return this.showArrows();
    return this.hideArrows();
  }

  viewportMobile({ tabsPerPage, tabs, activeTabIndex }) {
    if (tabs.length > tabsPerPage.tabsDefault) {
      this.setTabWidth(tabsPerPage, tabsPerPage.tabsDefault);
      this.setActivePageMobile(activeTabIndex);

      return this.showArrows();
    }
    return this.hideArrows();
  }


  // arrows

  showArrows() {
    this.setState({
      displayArrows: true,
    });
  }

  hideArrows() {
    this.setState({
      displayArrows: false,
    });
  }


  // navigation

  nextPage() {
    this.setState({
      activePage: this.state.activePage += 1,
    });
  }

  prevPage() {
    this.setState({
      activePage: this.state.activePage -= 1,
    });
  }

  render() {
    const {
      displayArrows,
      activePage,
      tabsPerPage,
      tabWidth,
    } = this.state;
    const {
      tabsVariant,
      tabs,
      fixedTab,
      activeTabIndex,
      activeTabContent,
      onChange,
      newTabAdded,
    } = this.props;

    const tabsSliderClass = classnames('tabs-slider', { 'has-nav': displayArrows });
    const tabsSliderTabsClass = classnames('tabs-slider__tabs', {
      'tabs-slider__tabs--down-arrow': tabsVariant === TABS_VARIANT_ARROW,
      'tabs-slider__tabs--underline': tabsVariant === TABS_VARIANT_UNDERLINE,
    });

    const prevArrowClass = classnames('tabs-slider__nav tabs-slider__nav--prev', {
      'is-disabled': activePage === 0,
    });
    const nextArrowClass = classnames('tabs-slider__nav tabs-slider__nav--next', {
      'is-disabled': activePage === tabs.length - tabsPerPage,
    });

    const styleTabWidth = {
      flexBasis: `${tabWidth}%`,
      width: `${tabWidth}%`,
    };

    const styleTabsTrack = {
      transform: `translateX(${activePage * -tabWidth}%)`,
    };

    const tabHeaders = tabs.map((tab, index) => {
      const tabsSliderTabClass = classnames('tabs-slider__tab', {
        'is-active': index === activeTabIndex,
        'tabs-slider__tab--new': index === tabs.length - 1 && newTabAdded,
      });

      return (
        <div className={tabsSliderTabClass}
          key={index}
          style={styleTabWidth}
          onClick={() => onChange(index)}
          {...qa('tab-item')}
        >
          {tab}
        </div>
      );
    });


    return (
      <div className="tabs-slider-container">
        <div className={tabsSliderClass}>
          <div className={tabsSliderTabsClass}>
            {fixedTab}
            <div className="tabs-slider__tabs-track" style={styleTabsTrack}>
              {tabHeaders}
            </div>
          </div>
          {
            tabs.length > tabsPerPage &&
            <div className="tabs-slider__arrows">
              <div className={prevArrowClass} onClick={() => this.prevPage()}>
                <i className="agi agi agi-double-chevron-left"></i>
              </div>
              <div className={nextArrowClass} onClick={() => this.nextPage()}>
                <i className="agi agi agi-double-chevron-right"></i>
              </div>
            </div>
          }
        </div>
        {
          activeTabContent &&
          <div className="tabs-slider__detail">
            {activeTabContent}
          </div>
        }
      </div>
    );
  }
}

TabsMenuSlider.propTypes = {
  tabs: PropTypes.any.isRequired,
  onChange: PropTypes.func.isRequired,
  activeTabIndex: PropTypes.number,
  activeTabContent: PropTypes.any,
  fixedTab: PropTypes.object,
  tabsVariant: PropTypes.string,
  tabsPerPage: PropTypes.object,
  newTabAdded: PropTypes.bool,
};

TabsMenuSlider.defaultProps = {
  tabsVariant: TABS_VARIANT_UNDERLINE,
  tabsPerPage: {
    tabsLarge: TABS_LARGE,
    tabsMedium: TABS_MEDIUM,
    tabsSmall: TABS_SMALL,
    tabsDefault: TABS_DEFAULT,
  },
  onChange: () => {},
};

export default TabsMenuSlider;
