import React from 'react';
import chai, { expect } from 'chai';
import { shallow } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import sinonChai from 'sinon-chai';

import FormSwitch from 'components/FormSwitch/FormSwitch';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('FormSwitch component', () => {
  const props = {
    label: 'Switch',
    isDisabled: true,
    isChecked: true,
    onChange: () => {},
  };

  it('renders label prop', () => {
    const wrapper = shallow(<FormSwitch label={props.label} />);
    expect(wrapper.find('.switch-wrap')).to.exist;
    expect(wrapper.find('.switch__label').text()).to.equal(props.label);
  });

  it('renders isDisabled prop', () => {
    expect(shallow(<FormSwitch isDisabled={props.isDisabled} />).find('input')).to.have.prop('disabled');
  });

  it('renders isChecked prop', () => {
    expect(shallow(<FormSwitch isChecked={props.isChecked} />).find('input')).to.have.prop('checked');
  });

  describe('actions', () => {
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('performs function onChange', () => {
      const spyClick = sandbox.spy(props, 'onChange');
      const wrapper = shallow(<FormSwitch label={props.label} onChange={props.onChange} />);
      wrapper.find('input').simulate('change');
      expect(spyClick).to.have.been.calledOnce;
    });

    it('does not perform function onChange on disabled switch', () => {
      const spyClick = sandbox.spy(props, 'onChange');
      const wrapper = shallow(<FormSwitch label={props.label} isDisabled onChange={props.onChange} />);
      wrapper.find('input').simulate('change');
      expect(spyClick).to.not.have.been.called;
    });
  });
});
