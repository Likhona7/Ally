import React from 'react';
import chai, { expect } from 'chai';
import { mount } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';

import FormField from './FormField';

chai.use(chaiEnzyme());


describe('FormField component', () => {
  describe('field', () => {
    it('no error is displayed unless error and touched evaluates to true', () => {
      const wrapper = mount(<FormField field={{ onChange() {} }} />);
      expect(wrapper.find('.input__error')).to.have.length(0);
    });

    it('display error when error and touched are passed in', () => {
      const error = 'This is an error';
      const wrapper = mount(<FormField field={{ error, touched: true, onChange() {} }} />);
      expect(wrapper.find('.input__error')).to.have.length(1);
    });
  });

  describe('label', () => {
    it('has empty label by default', () => {
      const wrapper = mount(<FormField field={{}} />);
      expect(wrapper.find('label')).to.have.length(0);
    });

    it('can be passed in', () => {
      const label = 'this is a label';
      const wrapper = mount(<FormField field={{}} label={label} />);
      expect(wrapper.find('label').text()).to.equal(label);
    });
  });

  describe('prompt', () => {
    it('has empty prompt by default', () => {
      const wrapper = mount(<FormField field={{}} />);
      expect(wrapper.find('input')).to.not.have.attr('placeholder');
    });

    it('can be passed in', () => {
      const prompt = 'this is a prompt';
      const wrapper = mount(<FormField field={{}} prompt={prompt} />);
      expect(wrapper.find('input')).to.have.attr('placeholder', prompt);
    });
  });

  describe('type', () => {
    it('type is set to text by default', () => {
      const wrapper = mount(<FormField field={{}} />);
      expect(wrapper.find('input')).to.have.attr('type', 'text');
    });

    it('can be passed in', () => {
      const type = 'number';
      const wrapper = mount(<FormField field={{}} type={type} />);
      expect(wrapper.find('input')).to.have.attr('type', type);
    });
  });

  describe('touched', () => {
    it('touched is not provided to the input component', () => {
      const error = 'This is an error';
      const wrapper = mount(<FormField field={{ error, touched: true, onChange() {} }} />);
      expect(wrapper.find('input')).to.not.have.attr('touched', true);
    });
  });

  describe('error', () => {
    it('error is not provided to the input component', () => {
      const error = 'This is an error';
      const wrapper = mount(<FormField field={{ error, touched: true, onChange() {} }} />);
      expect(wrapper.find('input')).to.not.have.attr('error', error);
    });
  });
});
