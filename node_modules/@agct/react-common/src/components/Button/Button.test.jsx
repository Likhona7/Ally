import React from 'react';
import chai, { expect } from 'chai';
import { mount } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';

import Button from './Button';

chai.use(chaiEnzyme());


describe('Button component', () => {
  describe('disabled state', () => {
    it('is not disabled by default', () => {
      expect(mount(<Button />).find('.btn')).to.not.be.disabled();
    });

    it('can be passed in', () => {
      expect(mount(<Button isDisabled />).find('.btn')).to.be.disabled();
      expect(mount(<Button isDisabled={false} />).find('.btn')).to.not.be.disabled();
    });
  });

  describe('children', () => {
    it('has no children by default', () => {
      expect(mount(<Button />).prop('children')).to.be.undefined;
    });

    it('can be passed in', () => {
      const child = 'this is a child';
      const wrapper = mount(<Button children={child} />);
      expect(wrapper.find('.btn').text()).to.equal(child);
    });
  });

  describe('className', () => {
    it('is btn by default', () => {
      const wrapper = mount(<Button />);
      expect(wrapper.find('button').props().className).to.equal('btn');
    });

    it('can be passed in', () => {
      const className = 'btn btn--primary';
      const wrapper = mount(<Button className={className} />);
      expect(wrapper.find('button').props().className).to.equal(className);
    });
  });

  describe('actions', () => {
    const sandbox = sinon.sandbox.create();
    const actions = { onClick() {} };

    afterEach(() => {
      sandbox.restore();
    });

    it('performs function on click', () => {
      const spyClick = sandbox.spy(actions, 'onClick');
      const wrapper = mount(<Button onClick={actions.onClick} />).find('.btn');
      wrapper.simulate('click');
      expect(spyClick).to.have.been.calledOnce;
    });

    it('does not perform function if disabled', () => {
      const spyClick = sandbox.spy(actions, 'onClick');
      const wrapper = mount(<Button isDisabled onClick={actions.onClick} />).find('.btn');
      wrapper.simulate('click');
      expect(spyClick).to.not.have.been.called;
    });
  });
});
