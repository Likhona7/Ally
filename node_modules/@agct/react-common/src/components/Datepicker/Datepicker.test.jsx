import React from 'react';
import chai, { expect } from 'chai';
import { shallow } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import sinonChai from 'sinon-chai';

import Datepicker from './Datepicker';

import moment from 'moment';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('Datepicker component', () => {
  describe('Toggles display', () => {
    it('does not display by default', () => {
      const wrapper = shallow(<Datepicker />);
      expect(wrapper.find('.datepicker')).to.not.exist;
    });

    it('does not display if disabled', () => {
      const wrapper = shallow(<Datepicker isDisabled />);
      const sandbox = sinon.sandbox.create();
      const spyClick = sandbox.spy(Datepicker.prototype, 'showDatepicker');
      wrapper.find('.qa-datepicker-toggle').simulate('click');
      expect(spyClick).to.have.not.been.called;
      expect(wrapper.find('.datepicker')).to.not.exist;
      sandbox.restore();
    });

    it('displays on click of input button', () => {
      const wrapper = shallow(<Datepicker />);
      const sandbox = sinon.sandbox.create();
      const spyClick = sandbox.spy(Datepicker.prototype, 'showDatepicker');
      wrapper.find('.qa-datepicker-toggle').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(wrapper.find('.datepicker')).to.exist;
      sandbox.restore();
    });
  });

  describe('Current date is active', () => {
    const wrapper = shallow(
      <Datepicker isVisible />);

    it('has today\'s date selected', () => {
      expect(wrapper.find('.datepicker__calendar__item--day.is-active')).to.exist;
    });
  });

  describe('Passing a date into the calendar', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2015-11-15"
      />);

    it('The correct date should reflect in the active date and title', () => {
      const expected = moment('2015-11-15').toString();

      const activeDate = wrapper.state('activeDate').toString();
      expect(activeDate).to.equal(expected);
    });
  });

  describe('Next and Previous buttons change active month', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2015-10-15"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('click next link', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'navigate');
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(1);
      expect(wrapper.find('.datepicker__title').text()).to.equal('November 2015');
    });

    it('click previous link', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'navigate');
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(-1);
      expect(wrapper.find('.datepicker__title').text()).to.equal('October 2015');
    });
  });

  describe('Clicking a day changes active date', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2016-06-15"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('click day 1 link', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectDay');
      const expected = moment('2016-06-02').toString();

      wrapper.find('.datepicker__calendar__item--day').at(3).simulate('click');
      expect(spyClick).to.have.been.calledOnce;

      const activeDate = wrapper.state('activeDate').toString();
      expect(activeDate).to.equal(expected);
    });
  });

  describe('Changing month user journey', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2016-01-01"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('click title link', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'changeView');
      wrapper.find('.datepicker__title').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(wrapper.find('.datepicker__title').text()).to.equal('2016');
    });

    it('current month is active', () => {
      expect(wrapper.find('.datepicker__calendar__item--month.is-active').text()).to.equal('Jan');
    });

    it('renders 12 months', () => {
      expect(wrapper.find('.datepicker__calendar__item--month').length).to.equal(12);
    });

    it('Selects a month', () => {
      wrapper.find('.datepicker__calendar__item--month').at(3).simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('April 2016');
    });
  });

  describe('Selecting a new year journey', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2016-01-01"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('click title link', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'changeView');
      wrapper.find('.datepicker__title').simulate('click').simulate('click');
      expect(spyClick).to.have.been.calledTwice;
      expect(wrapper.find('.datepicker__title').text()).to.equal('2009-2020');
    });

    it('current year is active', () => {
      expect(wrapper.find('.datepicker__calendar__item--year.is-active').text()).to.equal('2016');
    });

    it('renders 12 years', () => {
      expect(wrapper.find('.datepicker__calendar__item--year').length).to.equal(12);
    });

    it('Selects a year', () => {
      wrapper.find('.datepicker__title').simulate('click').simulate('click');
      wrapper.find('.datepicker__calendar__item--year').at(3).simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2012');
    });

    it('selects a month', () => {
      wrapper.find('.datepicker__calendar__item--month').at(3).simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('April 2012');
    });
  });

  describe('Next and Previous buttons change active year', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2016-07-08"
      />);

    it('Changes active year to next year', () => {
      wrapper.find('.datepicker__title').simulate('click');
      wrapper.find('.datepicker__button--next').simulate('click');

      expect(wrapper.find('.datepicker__title').text()).to.equal('2017');
    });

    it('Changes active year back to current year', () => {
      wrapper.find('.datepicker__button--prev').simulate('click');

      expect(wrapper.find('.datepicker__title').text()).to.equal('2016');
    });

    it('Changes active year to previous year', () => {
      wrapper.find('.datepicker__button--prev').simulate('click');

      expect(wrapper.find('.datepicker__title').text()).to.equal('2015');
    });
  });

  describe('Clicking next and previous on years changes year ranges', () => {
    const wrapper = shallow(
      <Datepicker isVisible
        date="2015-12-15"
      />);
    wrapper.find('.datepicker__title').simulate('click').simulate('click');

    it('should go to the previous year range', () => {
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('1996-2007');
    });

    it('should got back to original year range', () => {
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2008-2019');
    });

    it('should got back to the next year range', () => {
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2020-2031');
    });
  });

  describe('Passing in max dates in all views', () => {
    const wrapper = shallow(
      <Datepicker
        date="2015-06-10"
        maxDate="2019-10-10"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('should not be able to click next button in month view', () => {
      wrapper.find('.qa-datepicker-toggle').simulate('click');
      wrapper.find('.datepicker__title').simulate('click');
      wrapper.find('.datepicker__button--next').simulate('click').simulate('click').simulate('click').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2019');
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2019');
    });

    it('should not be able to click on month past max', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectMonth');
      wrapper.find('.datepicker__calendar__item--month').at(11).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });

    it('should not be able to click next button in day view', () => {
      wrapper.find('.datepicker__calendar__item--month').at(9).simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('October 2019');
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('October 2019');
    });

    it('should not be able to click on day past max', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectDay');
      wrapper.find('.datepicker__calendar__item--day').at(15).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });

    it('should not be able to click next button in years view', () => {
      wrapper.find('.datepicker__title').simulate('click').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2012-2023');
      wrapper.find('.datepicker__button--next').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2012-2023');
    });

    it('should not be able to click on year past max', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectYear');
      wrapper.find('.datepicker__calendar__item--month').at(11).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });
  });

  describe('Passing in min dates in all views', () => {
    const wrapper = shallow(
      <Datepicker
        date="2015-06-10"
        minDate="2014-05-10"
      />);
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('should not be able to click prev button in month view', () => {
      wrapper.find('.qa-datepicker-toggle').simulate('click');
      wrapper.find('.datepicker__title').simulate('click');
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2014');
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2014');
    });

    it('should not be able to click on month past min', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectMonth');
      wrapper.find('.datepicker__calendar__item--month').at(0).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });

    it('should not be able to click prev button in day view', () => {
      wrapper.find('.datepicker__calendar__item--month').at(4).simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('May 2014');
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('May 2014');
    });

    it('should not be able to click on day past min', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectDay');
      wrapper.find('.datepicker__calendar__item--day').at(1).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });

    it('should not be able to click prev button in years view', () => {
      wrapper.find('.datepicker__title').simulate('click').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2007-2018');
      wrapper.find('.datepicker__button--prev').simulate('click');
      expect(wrapper.find('.datepicker__title').text()).to.equal('2007-2018');
    });

    it('should not be able to click on year past min', () => {
      const spyClick = sandbox.spy(Datepicker.prototype, 'selectYear');
      wrapper.find('.datepicker__calendar__item--month').at(0).simulate('click');
      expect(spyClick).to.have.been.notCalled;
    });
  });
});
