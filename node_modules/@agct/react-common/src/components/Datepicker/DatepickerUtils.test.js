import chai, { expect } from 'chai';
import chaiEnzyme from 'chai-enzyme';
import sinonChai from 'sinon-chai';

import moment from 'moment';
import 'moment-range';

import {
  getTitleDayView,
  getTitleMonthView,
  getTitleYearView,
  getYearRange,
  getDays,
  getMonths,
  getYears,
} from './DatepickerUtils';

moment.updateLocale('en', {
  week: {
    dow: 1, // Monday is the first day of the week.
  },
});

const getTitleDayViewMoment = getTitleDayView(moment);
const getTitleMonthViewMoment = getTitleMonthView(moment);
const getTitleYearViewMoment = getTitleYearView(moment);
const getYearRangeMoment = getYearRange(moment);
const getDaysMoment = getDays(moment);
const getMonthsMoment = getMonths(moment);
const getYearsMoment = getYears(moment);

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('Date picker utils', () => {
  const month = 1;
  const year = 2016;

  describe('getTitleDayView', () => {
    it('should return a month year string', () => {
      const expected = 'February 2016';

      expect(getTitleDayViewMoment(month, year)).to.equal(expected);
    });
  });

  describe('getTitleMonthView', () => {
    it('a valid year to be returned', () => {
      const expected = '2016';

      expect(getTitleMonthViewMoment(year)).to.equal(expected);
    });
  });

  describe('getTitleYearView', () => {
    it('a valid year range to be returned', () => {
      const startYear = '1998';
      const expected = '1998-2016';

      expect(getTitleYearViewMoment(startYear, year)).to.equal(expected);
    });
  });

  describe('getYearRange', () => {
    it('a valid year range to be returned', () => {
      const expected = { start: 2009, end: 2020 };

      expect(getYearRangeMoment(year).start.year()).to.equal(expected.start);
      expect(getYearRangeMoment(year).end.year()).to.equal(expected.end);
    });
  });

  describe('getDays', () => {
    it('a valid days range to be returned', () => {
      const func = getDaysMoment(month, year);
      const expected = { startDate: 1, endDate: 6, calLength: 35 };

      expect(func.length).to.equal(expected.calLength);
      expect(func[0].date()).to.equal(expected.startDate);
      expect(func[expected.calLength - 1].date()).to.equal(expected.endDate);
    });
  });

  describe('getMonths', () => {
    it('a valid months range to be returned', () => {
      const expected = { startMonth: 0, endMonth: 11, calLength: 12 };
      const func = getMonthsMoment(month, year);

      expect(func.length).to.equal(expected.calLength);
      expect(func[0].month()).to.equal(expected.startMonth);
      expect(func[11].month()).to.equal(expected.endMonth);
    });
  });

  describe('getYears', () => {
    it('a valid years range to be returned', () => {
      const func = getYearsMoment(year);
      const expected = { startYear: 2009, endYear: 2020, calLength: 12 };

      expect(func.length).to.equal(expected.calLength);
      expect(func[0].year()).to.equal(expected.startYear);
      expect(func[11].year()).to.equal(expected.endYear);
    });
  });
});
