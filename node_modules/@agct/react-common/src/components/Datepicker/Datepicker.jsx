import React, { PropTypes } from 'react';
import _ from 'lodash';
import classnames from 'classnames';
import moment from 'moment';
import 'moment-range';
import {
  getTitleDayView,
  getTitleMonthView,
  getTitleYearView,
  getYearRange,
  getDays,
  getMonths,
  getYears,
} from './DatepickerUtils';

moment.updateLocale('en', {
  week: {
    dow: 1, // Monday is the first day of the week.
  },
});

const DAY_RANGE = 'days';
const MONTH_RANGE = 'months';
const YEAR_RANGE = 'years';
const YEAR_COUNT = 12;
const DAY_TITLES = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];

const getTitleDayViewMoment = getTitleDayView(moment);
const getTitleMonthViewMoment = getTitleMonthView(moment);
const getTitleYearViewMoment = getTitleYearView(moment);
const getYearRangeMoment = getYearRange(moment);
const getDaysMoment = getDays(moment);
const getMonthsMoment = getMonths(moment);
const getYearsMoment = getYears(moment);

class Datepicker extends React.Component {
  constructor(props) {
    super(props);

    const isVisible = props.isVisible;

    const activeDate = moment(props.date || undefined);
    const minDate = props.minDate ? moment(props.minDate) : undefined;
    const maxDate = props.maxDate ? moment(props.maxDate) : undefined;

    const currentYear = activeDate.year();
    const currentMonth = activeDate.month();
    const currentDay = activeDate.date();

    this.state = {
      isVisible,
      activeDate,
      minDate,
      maxDate,
      currentYear,
      currentMonth,
      currentDay,
      currentRange: DAY_RANGE,
      title: getTitleDayViewMoment(currentMonth, currentYear),
    };
  }

  componentWillReceiveProps(nextProps) {
    const activeDate = moment(nextProps.date || undefined);
    const minDate = nextProps.minDate ? moment(nextProps.minDate) : undefined;
    const maxDate = nextProps.maxDate ? moment(nextProps.maxDate) : undefined;

    this.setState({
      activeDate,
      minDate,
      maxDate,
    });
  }

  getCurrentViewDatesAtIndex(index) {
    let year = moment().year(this.state.currentYear);
    let month = year.month(this.state.currentMonth);

    if (this.state.currentRange === YEAR_RANGE) {
      year = getYearsMoment(this.state.currentYear)[index];
      month = getMonthsMoment(year.year())[index];
    }

    if (this.state.currentRange === MONTH_RANGE) {
      month = getMonthsMoment(this.state.currentYear)[index];
    }

    return { year, month };
  }

  addListener() {
    return document.addEventListener('mouseup', (e) => this.handleDocumentBlur(e));
  }

  removeListener() {
    return document.removeEventListener('mouseup', (e) => this.handleDocumentBlur(e));
  }

  showDatepicker() {
    this.addListener();

    this.setState({
      isVisible: true,
    });
  }

  handleDocumentBlur(evt) {
    const path = [];
    let node = evt.target;

    while (node !== document.body) {
      path.push(node);
      node = node.parentNode;
    }

    const isParent = _.find(path, _node => _node === this.uiRef);
    if (!isParent) {
      this.setState({ isVisible: false });
    }
    this.removeListener();
  }


  navigate(amount) {
    const month = this.state.currentMonth;
    const year = this.state.currentYear;

    if (amount > 0 && this.arrowRightDisableCheck()) return;
    if (amount < 0 && this.arrowLeftDisableCheck()) return;

    const navigateDay = () => {
      const nextDate = moment().year(year).month(month).add(amount, 'months');
      const nextMonth = nextDate.month();
      const nextYear = nextDate.year();
      this.setState({
        currentDay: 1,
        currentMonth: nextMonth,
        currentYear: nextYear,
        title: getTitleDayViewMoment(nextMonth, nextYear),
      });
    };

    const navigateMonth = () => {
      const nextYear = moment().year(year).add(amount, 'years').year();
      this.setState({
        currentYear: nextYear,
        title: getTitleMonthViewMoment(nextYear),
      });
    };

    const navigateYear = () => {
      const nextYear = moment().year(year).add(amount * YEAR_COUNT, 'years').year();
      const { start, end } = getYearRangeMoment(nextYear);
      this.setState({
        currentYear: nextYear,
        title: getTitleYearViewMoment(start.year(), end.year()),
      });
    };

    switch (this.state.currentRange) {
      case DAY_RANGE:
        navigateDay();
        break;
      case MONTH_RANGE:
        navigateMonth();
        break;
      case YEAR_RANGE:
        navigateYear();
        break;
      default:
        break;
    }
  }


  changeView() {
    const range = this.state.currentRange;
    let rangeToSet;
    let titleToSet;

    if (range === DAY_RANGE) {
      rangeToSet = MONTH_RANGE;
      titleToSet = getTitleMonthViewMoment(this.state.currentYear);
    }
    if (range === MONTH_RANGE || range === YEAR_RANGE) {
      const { start, end } = getYearRangeMoment(this.state.currentYear);
      rangeToSet = YEAR_RANGE;
      titleToSet = getTitleYearViewMoment(start.year(), end.year());
    }

    this.setState({
      currentRange: rangeToSet,
      title: titleToSet,
    });
  }

  dayDisableCheck(date) {
    return (
      this.state.minDate && date.isBefore(this.state.minDate, 'day')
      || (this.state.maxDate && date.isAfter(this.state.maxDate, 'day'))
    );
  }

  currentDate() {
    return moment({
      year: this.state.currentYear,
      month: this.state.currentMonth,
      date: this.state.currentDay,
    });
  }

  dayInactiveCheck(date) {
    return !date.isSame(this.currentDate(), 'month');
  }

  monthDisableCheck(date) {
    return (
      this.state.minDate && date.isBefore(this.state.minDate, 'month'))
      || (this.state.maxDate && date.isAfter(this.state.maxDate, 'month')
    );
  }

  yearDisableCheck(date) {
    return (
      (this.state.minDate && date.isBefore(this.state.minDate, 'year'))
      || (this.state.maxDate && date.isAfter(this.state.maxDate, 'year'))
    );
  }

  arrowLeftDisableCheck() {
    const { year, month } = this.getCurrentViewDatesAtIndex(0);

    return (
      this.state.minDate
      && year.isSameOrBefore(this.state.minDate, 'year')
      && month.isSameOrBefore(this.state.minDate, 'month')
    );
  }

  arrowRightDisableCheck() {
    const { year, month } = this.getCurrentViewDatesAtIndex(YEAR_COUNT - 1);

    return (
      this.state.maxDate
      && year.isSameOrAfter(this.state.maxDate, 'year')
      && month.isSameOrAfter(this.state.maxDate, 'month')
    );
  }

  selectDay(date) {
    const activeDate = date;
    const currentYear = activeDate.year();
    const currentMonth = activeDate.month();
    const currentDay = activeDate.date();

    if (this.dayDisableCheck(date)) return;
    if (this.dayInactiveCheck(date)) {
      this.setState({
        title: getTitleDayViewMoment(currentMonth, currentYear),
      });
    }

    this.setState({
      activeDate,
      currentYear,
      currentMonth,
      currentDay,
      isVisible: false,
    });

    this.props.onChange(date);
    this.removeListener();
  }

  selectMonth(date) {
    const month = date.month();

    if (this.monthDisableCheck(date)) return;
    this.setState({
      currentRange: DAY_RANGE,
      currentMonth: month,
      title: getTitleDayViewMoment(month, this.state.currentYear),
    });
  }

  selectYear(date) {
    const year = date.year();

    if (this.yearDisableCheck(date)) return;
    this.setState({
      currentRange: MONTH_RANGE,
      currentYear: year,
      title: getTitleMonthViewMoment(year),
    });
  }


  render() {
    const isDisabled = this.props.isDisabled;

    const disableLeftArrowClass = classnames('datepicker__button datepicker__button--prev', {
      'is-disabled': this.arrowLeftDisableCheck(),
    });

    const disableRightArrowClass = classnames('datepicker__button datepicker__button--next', {
      'is-disabled': this.arrowRightDisableCheck(),
    });

    const fullClassName = classnames('datepicker-wrap', {
      'is-open': this.state.isVisible,
      'dark-theme': this.props.theme === 'dark',
    });

    return (
      <div ref={(ref) => (this.uiRef = ref)} className={fullClassName}>
        <div className="dropdown">
          <div className="btn dropdown__toggle qa-datepicker-toggle"
            placeholder="Datepicker"
            onClick={() => !isDisabled && this.showDatepicker()}
            disabled={isDisabled}
          >
            <span className="dropdown__title">{this.state.activeDate.format('DD MMM YYYY')}</span>
            <i className="agi agi-calendar color-primary"></i>
          </div>
        </div>

        {this.state.isVisible &&
          <div className="datepicker">
            <div>
              <button className={disableLeftArrowClass} type="button" onClick={() => this.navigate(-1)}>«</button>
              <span className="datepicker__title" onClick={() => this.changeView()}>
                {this.state.title}
              </span>
              <button className={disableRightArrowClass} type="button" onClick={() => this.navigate(1)}>»</button>
            </div>

            <div>
              {
                this.state.currentRange === YEAR_RANGE &&
                <ul className="datepicker__calendar">
                  {getYearsMoment(this.state.currentYear).map((date, index) => {
                    const formattedDate = date.format('YYYY');
                    const baseClass = classnames('datepicker__calendar__item datepicker__calendar__item--year', {
                      'is-disabled': this.yearDisableCheck(date),
                      'is-active': date.isSame(this.state.activeDate, 'year'),
                    });
                    return (
                      <li key={index} onClick={() => this.selectYear(date)} className={baseClass} >
                        {formattedDate}
                      </li>
                    );
                  })}
                </ul>
              }
              {
                this.state.currentRange === MONTH_RANGE &&
                <ul className="datepicker__calendar">
                  {getMonthsMoment(this.state.currentYear).map((date, index) => {
                    const formattedDate = date.format('MMM');
                    const baseClass = classnames('datepicker__calendar__item datepicker__calendar__item--month', {
                      'is-disabled': this.monthDisableCheck(date),
                      'is-active': date.isSame(this.state.activeDate, 'month'),
                    });
                    return (
                      <li key={index} onClick={() => this.selectMonth(date)} className={baseClass} >
                        {formattedDate}
                      </li>
                    );
                  })}
                </ul>
              }
              {
                this.state.currentRange === DAY_RANGE &&
                <div>
                  <ul className="datepicker__calendar datepicker__calendar--titles">
                    {DAY_TITLES.map(day => (
                      <li className="datepicker__calendar__item datepicker__calendar__item--title"
                        key={day}
                      >
                        {day}
                      </li>
                    ))}
                  </ul>
                  <ul className="datepicker__calendar">
                    {getDaysMoment(this.state.currentMonth, this.state.currentYear).map((date, index) => {
                      const formattedDate = date.format('D');
                      const baseClass = classnames('datepicker__calendar__item datepicker__calendar__item--day', {
                        'is-inactive': this.dayInactiveCheck(date),
                        'is-disabled': this.dayDisableCheck(date),
                        'is-active': date.isSame(this.state.activeDate, 'day'),
                      });
                      return (
                        <li key={index} onClick={() => this.selectDay(date)} className={baseClass}>
                          {formattedDate}
                        </li>
                      );
                    })}
                  </ul>
                </div>
              }
            </div>
          </div>
        }
      </div>
    );
  }
}

Datepicker.propTypes = {
  theme: PropTypes.string,
  date: PropTypes.string,
  minDate: PropTypes.string,
  maxDate: PropTypes.string,
  isVisible: PropTypes.bool,
  isDisabled: PropTypes.bool,
  onChange: PropTypes.func,
};

Datepicker.defaultProps = {
  isDisabled: false,
  onChange: () => {},
};


export default Datepicker;
