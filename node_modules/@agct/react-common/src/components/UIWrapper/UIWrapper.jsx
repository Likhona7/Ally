import React, { Component } from 'react';
import { canUseEventListeners } from 'exenv';
import classNames from 'classnames';


const UIWrapper = WrappedComponent => class extends Component {
  constructor(props) {
    super(props);

    this.state = {
      isOpen: false,
    };

    this.handleDocumentBlur = this.handleDocumentBlur.bind(this);

    this.toggle = this.toggle.bind(this);
    this.open = this.open.bind(this);
    this.close = this.close.bind(this);
  }

  componentWillMount() {
    if (canUseEventListeners) {
      document.addEventListener('mouseup', this.handleDocumentBlur);
      window.addEventListener('resize', this.handleDocumentBlur);
      window.addEventListener('scroll', this.handleDocumentBlur);
    }
  }

  componentWillUnmount() {
    if (canUseEventListeners) {
      document.removeEventListener('mouseup', this.handleDocumentBlur);
      window.removeEventListener('resize', this.handleDocumentBlur);
      window.removeEventListener('scroll', this.handleDocumentBlur);
    }
  }


  handleDocumentBlur(evt) {
    const isParent = this.uiRef.contains(evt.target);
    if (!isParent) {
      this.setState({ isOpen: false });
    }
  }

  toggle() {
    this.setState({
      isOpen: !this.state.isOpen,
    });
  }

  open() {
    this.setState({
      isOpen: true,
    });
  }

  close() {
    this.setState({
      isOpen: false,
    });
  }

  render() {
    const className = classNames({
      'is-open': this.state.isOpen,
    });

    const ui = {
      isOpen: this.state.isOpen,
      toggle: this.toggle,
      open: this.open,
      close: this.close,
    };

    return (
      <div ref={(ref) => { this.uiRef = ref; }} className={className}>
        <WrappedComponent
          {...this.props}
          ui={ui}
        />
      </div>
    );
  }
};

export default UIWrapper;
