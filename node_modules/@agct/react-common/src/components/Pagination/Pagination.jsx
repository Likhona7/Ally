import React, { PropTypes } from 'react';
import { attr as qa } from '@agct/reacceptance/src/qa';

class Pagination extends React.Component {
  constructor(props) {
    super(props);
    this.state = { ...props };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({ ...nextProps });
  }

  changePage(page) {
    this.setState({ activePage: page });
    this.state.onChange(page);
  }

  render() {
    const startPointCalc = (active, total) => {
      if (active === 1) return active;
      if (active === total) return total - 2;
      return active - 1;
    };

    const startPoint = startPointCalc(this.state.activePage, this.state.pageCount);

    const paginationHidden = !this.state.activePage || !this.state.pageCount || this.state.pageCount === 1;
    const previousSpreadHidden = this.state.activePage <= 2 || this.state.pageCount <= 3;
    const nextSpreadHidden = (this.state.pageCount - this.state.activePage) < 2 || this.state.pageCount <= 3;

    const visiblePages = Array(3).fill()
      .map((x, i) => (startPoint + i))
      .filter(x => x >= 1 && x <= this.state.pageCount);

    return (
      <div className="pagination-wrap">
        {!paginationHidden &&
          <ul className="pagination">
            <li className="pagination__item" { ...qa('pagination-first') }>
              {(this.state.activePage === 1) && <span>First</span>}
              {(this.state.activePage > 1) && <a onClick={() => this.changePage(1)}>First</a>}
            </li>
            {!previousSpreadHidden && <li className="pagination__item" { ...qa('pagination-spread--previous') }>…</li>}
            {visiblePages.map(x => (
              <li className="pagination__item" { ...qa('pagination-page') } key={x}>
                {(this.state.activePage === x) && <span>{x}</span>}
                {(this.state.activePage !== x) && <a onClick={() => this.changePage(x)}>{x}</a>}
              </li>
            ))}
            {!nextSpreadHidden && <li className="pagination__item" { ...qa('pagination-spread--next') }>…</li>}
            <li className="pagination__item" { ...qa('pagination-last') }>
              {(this.state.activePage === this.state.pageCount) && <span>Last</span>}
              {
                this.state.activePage < this.state.pageCount &&
                <a onClick={() => this.changePage(this.state.pageCount)}>Last</a>
              }
            </li>
          </ul>
        }
      </div>
    );
  }
}

Pagination.propTypes = {
  pageCount: PropTypes.number.isRequired,
  activePage: PropTypes.number,
  onChange: PropTypes.func,
};

Pagination.defaultProps = {
  activePage: 1,
  onChange: () => {},
};

export default Pagination;
