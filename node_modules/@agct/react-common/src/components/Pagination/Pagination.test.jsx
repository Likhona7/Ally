import React from 'react';
import chai, { expect } from 'chai';
import { shallow, mount } from 'enzyme';
import chaiEnzyme from 'chai-enzyme';
import sinonChai from 'sinon-chai';
import { select } from '@agct/reacceptance/src/qa';

import Pagination from './Pagination';

chai.use(chaiEnzyme());
chai.use(sinonChai);

describe('Pagination component', () => {
  const actions = { onChange() {} };

  it('can create an instance', () => {
    const wrapper = shallow(<Pagination activePage={1} pageCount={1} onChange={actions.onChange} />);
    expect(wrapper).to.be.present();
  });

  describe('is hidden under certain circumstances', () => {
    it('hides when only single page', () => {
      const wrapper = mount(<Pagination activePage={1} pageCount={1} onChange={actions.onChange} />);
      expect(wrapper.find('.pagination')).to.not.be.present();
    });

    it('hides previous spread', () => {
      const wrapperHidden = mount(<Pagination activePage={1} pageCount={5} onChange={actions.onChange} />);
      const wrapperShown = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      expect(wrapperHidden.find(select('pagination-spread--previous'))).to.not.be.present();
      expect(wrapperShown.find(select('pagination-spread--previous'))).to.be.present();
    });

    it('hides next spread', () => {
      const wrapperHidden = mount(<Pagination activePage={5} pageCount={5} onChange={actions.onChange} />);
      const wrapperShown = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      expect(wrapperHidden.find(select('pagination-spread--next'))).to.not.be.present();
      expect(wrapperShown.find(select('pagination-spread--next'))).to.be.present();
    });
  });

  describe('shows correct number of children', () => {
    it('two pages', () => {
      const wrapper = mount(<Pagination activePage={1} pageCount={2} onChange={actions.onChange} />);
      expect(wrapper.find(select('pagination-page')).length).to.equal(2);
    });

    it('max three pages', () => {
      const wrapperThree = mount(<Pagination activePage={1} pageCount={3} onChange={actions.onChange} />);
      const wrapperFive = mount(<Pagination activePage={1} pageCount={5} onChange={actions.onChange} />);
      expect(wrapperThree.find(select('pagination-page')).length).to.equal(3);
      expect(wrapperFive.find(select('pagination-page')).length).to.equal(3);
    });
  });

  describe('shows correct active', () => {
    it('first page active', () => {
      const wrapper = mount(<Pagination activePage={1} pageCount={5} onChange={actions.onChange} />);
      expect(wrapper.find(select('pagination-page')).first()).to.have.descendants('span');
      expect(wrapper.find(select('pagination-page')).at(1)).to.have.descendants('a');
      expect(wrapper.find(select('pagination-page')).last()).to.have.descendants('a');
      expect(wrapper.find(select('pagination-first'))).to.have.descendants('span');
      expect(wrapper.find(select('pagination-last'))).to.have.descendants('a');
    });

    it('middle page active', () => {
      const wrapper = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      expect(wrapper.find(select('pagination-page')).first()).to.have.descendants('a');
      expect(wrapper.find(select('pagination-page')).at(1)).to.have.descendants('span');
      expect(wrapper.find(select('pagination-page')).last()).to.have.descendants('a');
      expect(wrapper.find(select('pagination-first'))).to.have.descendants('a');
      expect(wrapper.find(select('pagination-last'))).to.have.descendants('a');
    });

    it('last page active', () => {
      const wrapper = mount(<Pagination activePage={5} pageCount={5} onChange={actions.onChange} />);
      expect(wrapper.find(select('pagination-page')).first()).to.have.descendants('a');
      expect(wrapper.find(select('pagination-page')).at(1)).to.have.descendants('a');
      expect(wrapper.find(select('pagination-page')).last()).to.have.descendants('span');
      expect(wrapper.find(select('pagination-first'))).to.have.descendants('a');
      expect(wrapper.find(select('pagination-last'))).to.have.descendants('span');
    });
  });

  describe('onClick', () => {
    const sandbox = sinon.sandbox.create();

    afterEach(() => {
      sandbox.restore();
    });

    it('first link', () => {
      const spyClick = sandbox.spy(actions, 'onChange');
      const wrapper = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      wrapper.find(select('pagination-first')).find('a').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(1);
    });

    it('last link', () => {
      const spyClick = sandbox.spy(actions, 'onChange');
      const wrapper = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      wrapper.find(select('pagination-last')).find('a').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(5);
    });

    it('previous page item', () => {
      const spyClick = sandbox.spy(actions, 'onChange');
      const wrapper = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      wrapper.find(select('pagination-page')).first().find('a').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(2);
    });

    it('next page item', () => {
      const spyClick = sandbox.spy(actions, 'onChange');
      const wrapper = mount(<Pagination activePage={3} pageCount={5} onChange={actions.onChange} />);
      wrapper.find(select('pagination-page')).last().find('a').simulate('click');
      expect(spyClick).to.have.been.calledOnce;
      expect(spyClick).to.have.been.calledWith(4);
    });
  });
});
