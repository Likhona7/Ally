import React from 'react';
import chai, { expect } from 'chai';
import { mount } from 'enzyme';
import AGOLink from 'components/AGOLink/AGOLink';
import chaiEnzyme from 'chai-enzyme';

chai.use(chaiEnzyme());

const linkWithParams = (params) => (
  <AGOLink
    page="example"
    profileType="I"
    agoUrl="http://example.com"
    {...params}
  />
);
describe('AGO Link', () => {
  it('returns correctly encoded frame url when passed name', () => {
    const wrapper = mount(<AGOLink page="example" profileType="I" agoUrl="http://example.com" name="a" />);
    expect(wrapper).to.have.text('a');
    expect(wrapper.find('a')).to.have.attr('href', 'http://example.com/Oii.aspx?redirect=example&ProfileType=I');
  });

  it('returns correctly encoded frame url when passed children', () => {
    const wrapper = mount(<AGOLink page="example" profileType="I" agoUrl="http://example.com">example</AGOLink>);
    expect(wrapper).to.have.text('example');
    expect(wrapper.find('a')).to.have.attr('href', 'http://example.com/Oii.aspx?redirect=example&ProfileType=I');
  });

  it('correctly appends accountId', () => {
    const wrapper = mount(linkWithParams({ accountId: '123' }));
    expect(wrapper.find('a').prop('href')).to.contain('AccountId=123');
  });

  it('correctly appends investorId', () => {
    const wrapper = mount(linkWithParams({ investorId: '123' }));
    expect(wrapper.find('a').prop('href')).to.contain('InvestorId=123');
  });

  it('correctly appends profileId', () => {
    const wrapper = mount(linkWithParams({ profileId: '123' }));
    expect(wrapper.find('a').prop('href')).to.contain('ProfileId=123');
  });

  it('correctly appends startDate as a string', () => {
    const wrapper = mount(linkWithParams({ startDate: '2016-01-01' }));
    expect(wrapper.find('a').prop('href')).to.contain('StartDate=2016-01-01');
  });

  it('correctly appends endDate as a string', () => {
    const wrapper = mount(linkWithParams({ endDate: '2016-01-01' }));
    expect(wrapper.find('a').prop('href')).to.contain('EndDate=2016-01-01');
  });

  it('correctly sets data-qa to name', () => {
    const wrapper = mount(linkWithParams({ name: 'linkName' }));
    expect(wrapper.find('a').prop('data-qa')).to.contain('linkName');
  });

  it('correctly appends startDate as a date', () => {
    const wrapper = mount(linkWithParams({ startDate: new Date('2016-01-01') }));
    expect(wrapper.find('a').prop('href')).to.contain('StartDate=2016-01-01');
  });

  it('correctly appends endDate as a date', () => {
    const wrapper = mount(linkWithParams({ endDate: new Date('2016-01-01') }));
    expect(wrapper.find('a').prop('href')).to.contain('EndDate=2016-01-01');
  });
});
