import { expect } from 'chai';

import {
  fixCurrencyCode,
  formatMoney,
  formatMoneyWithSymbol,
  formatMoneyWithCode,
  formatMoneyDestructured,
} from './money';


describe('fixCurrencyCode', () => {
  it('converts YEN to JPY', () => {
    expect(fixCurrencyCode('YEN')).to.be.equal('JPY');
  });

  it('leaves JPY and other currency codes unaffected', () => {
    expect(fixCurrencyCode('JPY')).to.be.equal('JPY');
    expect(fixCurrencyCode('USD')).to.be.equal('USD');
    expect(fixCurrencyCode('GBP')).to.be.equal('GBP');
    expect(fixCurrencyCode('ZAR')).to.be.equal('ZAR');
    expect(fixCurrencyCode('AUD')).to.be.equal('AUD');
    expect(fixCurrencyCode('AUD')).to.be.equal('AUD');
    expect(fixCurrencyCode('EUR')).to.be.equal('EUR');

    expect(fixCurrencyCode('XXX')).to.be.equal('XXX');
  });
});


describe('formatMoney', () => {
  it('default symbol is R', () => {
    expect(formatMoney(100.00)).to.be.equal('R 100.00');
  });

  it('thousand seperator and decimal characters', () => {
    expect(formatMoney(85432342341.98)).to.be.equal('R 85 432 342 341.98');
    expect(formatMoney(200.45)).to.be.equal('R 200.45');
    expect(formatMoney(74389.10)).to.be.equal('R 74 389.10');
  });

  it('negative number', () => {
    expect(formatMoney(-748302128.32)).to.be.equal('R-748 302 128.32');
  });

  it('zero number', () => {
    expect(formatMoney(0)).to.be.equal('R 0.00');
  });

  it('two decimal points', () => {
    expect(formatMoney(1.1)).to.be.equal('R 1.10');
    expect(formatMoney(57984398)).to.be.equal('R 57 984 398.00');
    expect(formatMoney(489.1234567)).to.be.equal('R 489.12');
  });

  it('does not round .004999', () => {
    expect(formatMoney(99.004999)).to.be.equal('R 99.00');
  });

  it('rounds .005 up', () => {
    expect(formatMoney(99.005)).to.be.equal('R 99.01');
  });

  it('rounds .995 up to wholde number', () => {
    expect(formatMoney(99.995)).to.be.equal('R 100.00');
  });
});


describe('formatMoneyWithSymbol', () => {
  it('ZAR', () => {
    expect(formatMoneyWithSymbol(99, 'ZAR')).to.be.equal('R 99.00');
  });

  it('USD', () => {
    expect(formatMoneyWithSymbol(74239.34, 'USD')).to.be.equal('$ 74 239.34');
  });

  it('AUD', () => {
    expect(formatMoneyWithSymbol(9443471.48, 'AUD')).to.be.equal('A$ 9 443 471.48');
  });

  it('GBP', () => {
    expect(formatMoneyWithSymbol(1, 'GBP')).to.be.equal('\u00A3 1.00');
  });

  it('EUR', () => {
    expect(formatMoneyWithSymbol(2890.32, 'EUR')).to.be.equal('\u20AC 2 890.32');
  });

  it('JPY', () => {
    expect(formatMoneyWithSymbol(99, 'JPY')).to.be.equal('\u00A5 99.00');
  });

  it('FLEX legacy YEN codes', () => {
    expect(formatMoneyWithSymbol(99, 'YEN')).to.be.equal('\u00A5 99.00');
  });

  it('unknown XXX codes falls back', () => {
    expect(formatMoneyWithSymbol(99, 'XXX')).to.be.equal('XXX 99.00');
  });

  it('YEN and JPY are formated with decimals due to FLEX legacy complications', () => {
    expect(formatMoneyWithSymbol(983472.37123, 'YEN')).to.be.equal('\u00A5 983 472.37');
    expect(formatMoneyWithSymbol(90734578, 'JPY')).to.be.equal('\u00A5 90 734 578.00');
  });
});


describe('formatMoneyWithCode', () => {
  it('ZAR', () => {
    expect(formatMoneyWithCode(99, 'ZAR')).to.be.equal('ZAR 99.00');
  });

  it('USD', () => {
    expect(formatMoneyWithCode(74239.34, 'USD')).to.be.equal('USD 74 239.34');
  });

  it('AUD', () => {
    expect(formatMoneyWithCode(9443471.48, 'AUD')).to.be.equal('AUD 9 443 471.48');
  });

  it('GBP', () => {
    expect(formatMoneyWithCode(1, 'GBP')).to.be.equal('GBP 1.00');
  });

  it('EUR', () => {
    expect(formatMoneyWithCode(2890.32, 'EUR')).to.be.equal('EUR 2 890.32');
  });

  it('JPY', () => {
    expect(formatMoneyWithCode(99, 'JPY')).to.be.equal('JPY 99.00');
  });

  it('FLEX legacy YEN code converts to JPY', () => {
    expect(formatMoneyWithCode(99, 'YEN')).to.be.equal('JPY 99.00');
  });

  it('unknown XXX codes falls back', () => {
    expect(formatMoneyWithCode(99, 'XXX')).to.be.equal('XXX 99.00');
  });

  it('YEN and JPY are formated with decimals due to FLEX legacy complications', () => {
    expect(formatMoneyWithCode(983472.37123, 'YEN')).to.be.equal('JPY 983 472.37');
    expect(formatMoneyWithCode(90734578, 'JPY')).to.be.equal('JPY 90 734 578.00');
  });
});

describe('formatMoneyDestructured', () => {
  it('destructures positive value', () => {
    expect(formatMoneyDestructured(123456, 'ZAR'))
      .to.deep.equal({
        isoCode: 'ZAR',
        symbol: 'R',
        decimal: '.',
        units: ' 123 456',
        cents: '00',
        isNegative: false,
      });
  });

  it('destructures negative value', () => {
    expect(formatMoneyDestructured(-123456, 'ZAR'))
      .to.deep.equal({
        isoCode: 'ZAR',
        symbol: 'R',
        decimal: '.',
        units: '-123 456',
        cents: '00',
        isNegative: true,
      });
  });

  it('destructures small negative value', () => {
    expect(formatMoneyDestructured(-0.75, 'ZAR'))
      .to.deep.equal({
        isoCode: 'ZAR',
        symbol: 'R',
        decimal: '.',
        units: '-0',
        cents: '75',
        isNegative: true,
      });
  });

  it('destructures with no cents', () => {
    expect(formatMoneyDestructured(123456, 'ZAR', { precision: 0 }))
      .to.deep.equal({
        isoCode: 'ZAR',
        symbol: 'R',
        decimal: '.',
        units: ' 123 456',
        cents: undefined,
        isNegative: false,
      });
  });

  it('destructures with overriden decimal separator', () => {
    expect(formatMoneyDestructured(123456, 'ZAR', { decimal: ',' }))
      .to.deep.equal({
        isoCode: 'ZAR',
        symbol: 'R',
        decimal: ',',
        units: ' 123 456',
        cents: '00',
        isNegative: false,
      });
  });
});
