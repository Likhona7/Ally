import jwtDecode from 'jwt-decode';
import queryString from 'query-string';
import escapeStringRegexp from 'escape-string-regexp';

const pathPrefix = '/token/';
const pathBlackListRegExps = [
  /* prevent redirect loop */
  '/login',
  '/logout',
  '/token',
].map(x => new RegExp(`^${escapeStringRegexp(x)}`));


const safePath = (path) => {
  if (path) {
    const isBlacklisted = pathBlackListRegExps.reduce(
      (prev, re) => re.test(path) || prev, false);

    if (!isBlacklisted) {
      return path;
    }
  }
  return '/';
};

/* eslint-disable consistent-return */
export const initializeToken = () => {
  const pathname = window.location.pathname;

  if (pathname.substring(0, pathPrefix.length) === pathPrefix) {
    const token = pathname.substring(pathPrefix.length);
    try {
      jwtDecode(token);
    } catch (e) {
      // destroy app
      window.location = `${window.location.origin}/logout`;
      return;
    }

    // window.AUTH_TOKEN = token;
    const params = Object.assign({}, { redirect_url: '/' }, queryString.parse(location.search));
    const nextPath = safePath(params.redirect_url);

    return { token, nextPath };
  }

  return;
};

/* eslint-disable consistent-return */
export const extractEmail = (token) => {
  if (!token) return;
  try {
    const data = jwtDecode(token);
    return data.email;
  } catch (e) {
    return;
  }
};

/* eslint-disable consistent-return */
export const extractUsername = (token) => {
  if (!token) return;
  try {
    const data = jwtDecode(token);
    return data.unique_name;
  } catch (e) {
    return;
  }
};
