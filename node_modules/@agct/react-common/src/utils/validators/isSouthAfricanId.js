const ID_LENGTH = 13;

const convertNumberToString = number => `${number}`;
const getLastCharacter = string => string.slice(-1);
const getAllCharactersExceptLast = string => string.slice(0, -1);
const convertStringToArray = string => Array.from(string);
const add = (...args) => args.reduce((a, b) => (Number(a) + Number(b)), 0);
const addAllInArray = array => add(...array);
const isDivisibleByTwo = number => number % 2 === 0;
const getOddIndexesInArray = array => array.filter((x, i) => !isDivisibleByTwo(i + 1));
const getEvenIndexesInArray = array => array.filter((x, i) => isDivisibleByTwo(i + 1));
const convertArrayToString = array => array.join('');
const convertStringToNumber = string => Number(string);
const multiplyByTwo = number => number * 2;
const subtractTen = number => Number(number) - 10;

const compose = (...args) => (value) => args.reduce((a, b) => b(a), value);


const getControlDigit = (id) => (
  compose(
    convertNumberToString,
    getLastCharacter
  )(id)
);

const getOddIndexCalculatedValue = (id) => (
  compose(
    convertNumberToString,
    getAllCharactersExceptLast,
    convertStringToArray,
    getOddIndexesInArray,
    addAllInArray
  )(id)
);

const getEvenIndexCalculatedValue = (id) => (
  compose(
    convertNumberToString,
    convertStringToArray,
    getEvenIndexesInArray,
    convertArrayToString,
    convertStringToNumber,
    multiplyByTwo,
    convertNumberToString,
    convertStringToArray,
    addAllInArray
  )(id)
);

const getCheckDigit = (...args) => (
  compose(
    addAllInArray,
    convertNumberToString,
    getLastCharacter,
    subtractTen,
    convertNumberToString,
    getLastCharacter
  )(args)
);


const validate = (id) => {
  const idLength = convertNumberToString(id).length;

  if (!(id && idLength === ID_LENGTH)) return false;

  const controlDigit = getControlDigit(id);
  const oddIndexCalculatedValue = getOddIndexCalculatedValue(id);
  const evenIndexCalculatedValue = getEvenIndexCalculatedValue(id);
  const checkDigit = getCheckDigit(oddIndexCalculatedValue, evenIndexCalculatedValue);

  return controlDigit === checkDigit;
};


export { ID_LENGTH, validate };
export default validate;
