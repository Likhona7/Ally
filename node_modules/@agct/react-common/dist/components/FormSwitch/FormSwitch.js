(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'lodash'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('lodash'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.lodash);
    global.FormSwitch = mod.exports;
  }
})(this, function (exports, _react, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var FormSwitch = function (_React$Component) {
    _inherits(FormSwitch, _React$Component);

    function FormSwitch(props) {
      _classCallCheck(this, FormSwitch);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FormSwitch).call(this, props));

      _this.state = _extends({}, props);
      return _this;
    }

    _createClass(FormSwitch, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var id = _lodash2.default.uniqueId('switch');
        this.setState({ id: id });
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.setState(_extends({}, nextProps));
      }
    }, {
      key: 'handleChange',
      value: function handleChange(event) {
        this.setState({
          isChecked: !this.state.isChecked
        });
        this.props.onChange(event);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement(
          'div',
          { className: 'switch-wrap' },
          _react2.default.createElement('input', { type: 'checkbox',
            id: this.state.id,
            value: this.state.id,
            checked: this.state.isChecked,
            disabled: this.state.isDisabled,
            onChange: function onChange(e) {
              return !_this2.state.isDisabled && _this2.handleChange(e);
            }
          }),
          _react2.default.createElement(
            'label',
            { className: 'switch', htmlFor: this.state.id },
            _react2.default.createElement('span', { className: 'switch__toggle' }),
            _react2.default.createElement(
              'span',
              { className: 'switch__label' },
              this.state.label
            )
          )
        );
      }
    }]);

    return FormSwitch;
  }(_react2.default.Component);

  FormSwitch.propTypes = {
    label: _react.PropTypes.string.isRequired,
    isDisabled: _react.PropTypes.bool,
    isChecked: _react.PropTypes.bool,
    onChange: _react.PropTypes.func
  };

  FormSwitch.defaultProps = {
    isChecked: false,
    isDisabled: false,
    onChange: function onChange() {}
  };

  exports.default = FormSwitch;
});