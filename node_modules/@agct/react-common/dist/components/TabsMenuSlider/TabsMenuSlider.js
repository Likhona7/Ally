(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'classnames', '@agct/reacceptance/src/qa', './Breakpoints', './Variants'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('classnames'), require('@agct/reacceptance/src/qa'), require('./Breakpoints'), require('./Variants'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.classnames, global.qa, global.Breakpoints, global.Variants);
    global.TabsMenuSlider = mod.exports;
  }
})(this, function (exports, _react, _classnames, _qa, _Breakpoints, _Variants) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _classnames2 = _interopRequireDefault(_classnames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var mediaMatchLarge = void 0;
  var mediaMatchMedium = void 0;
  var mediaMatchSmall = void 0;

  var TabsMenuSlider = function (_React$Component) {
    _inherits(TabsMenuSlider, _React$Component);

    function TabsMenuSlider(props) {
      _classCallCheck(this, TabsMenuSlider);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabsMenuSlider).call(this, props));

      _this.state = {
        displayArrows: false,
        activePage: 0,
        tabsPerPage: 0,
        tabWidth: null
      };

      mediaMatchLarge = window.matchMedia('screen and (min-width: ' + _Breakpoints.LARGE + ')');
      mediaMatchMedium = window.matchMedia('screen and (min-width: ' + _Breakpoints.MEDIUM + ')');
      mediaMatchSmall = window.matchMedia('screen and (min-width: ' + _Breakpoints.SMALL + ')');

      mediaMatchLarge.addListener(function () {
        return _this.viewportChangeLarge(_this.props, mediaMatchLarge);
      });
      mediaMatchMedium.addListener(function () {
        return _this.viewportChangeMedium(_this.props, mediaMatchMedium);
      });
      mediaMatchSmall.addListener(function () {
        return _this.viewportChangeSmall(_this.props, mediaMatchSmall);
      });
      return _this;
    }

    _createClass(TabsMenuSlider, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.viewportChangeLarge(this.props, mediaMatchLarge);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.viewportChangeLarge(nextProps, mediaMatchLarge);
      }
    }, {
      key: 'setTabWidth',
      value: function setTabWidth(tabsPerPage, viewportSpecificTabsPerPage) {
        this.setState({
          tabsPerPage: viewportSpecificTabsPerPage,
          tabWidth: parseFloat(100 / viewportSpecificTabsPerPage).toPrecision(5)
        });
      }
    }, {
      key: 'setActivePage',
      value: function setActivePage(tabs, viewportSpecificTabsPerPage) {
        if (viewportSpecificTabsPerPage + this.state.activePage > tabs.length) {
          this.setState({
            activePage: Math.max(0, tabs.length - viewportSpecificTabsPerPage)
          });
        }
      }
    }, {
      key: 'setActivePageMobile',
      value: function setActivePageMobile(activeTabIndex) {
        var activePage = activeTabIndex >= 0 ? activeTabIndex : 0;
        this.setState({
          activePage: activePage
        });
      }
    }, {
      key: 'viewportChangeLarge',
      value: function viewportChangeLarge(_ref, viewport) {
        var tabsPerPage = _ref.tabsPerPage;
        var tabs = _ref.tabs;
        var activeTabIndex = _ref.activeTabIndex;

        if (!viewport.matches) return this.viewportChangeMedium({ tabsPerPage: tabsPerPage, tabs: tabs, activeTabIndex: activeTabIndex }, mediaMatchMedium);
        this.setTabWidth(tabsPerPage, tabsPerPage.tabsLarge);
        this.setActivePage(tabs, tabsPerPage.tabsLarge);

        if (tabs.length > tabsPerPage.tabsLarge) return this.showArrows();
        return this.hideArrows();
      }
    }, {
      key: 'viewportChangeMedium',
      value: function viewportChangeMedium(_ref2, viewport) {
        var tabsPerPage = _ref2.tabsPerPage;
        var tabs = _ref2.tabs;
        var activeTabIndex = _ref2.activeTabIndex;

        if (!viewport.matches) return this.viewportChangeSmall({ tabsPerPage: tabsPerPage, tabs: tabs, activeTabIndex: activeTabIndex }, mediaMatchSmall);
        this.setTabWidth(tabsPerPage, tabsPerPage.tabsMedium);
        this.setActivePage(tabs, tabsPerPage.tabsMedium);

        if (tabs.length > tabsPerPage.tabsMedium) return this.showArrows();
        return this.hideArrows();
      }
    }, {
      key: 'viewportChangeSmall',
      value: function viewportChangeSmall(_ref3, viewport) {
        var tabsPerPage = _ref3.tabsPerPage;
        var tabs = _ref3.tabs;
        var activeTabIndex = _ref3.activeTabIndex;

        if (!viewport.matches) return this.viewportMobile({ tabsPerPage: tabsPerPage, tabs: tabs, activeTabIndex: activeTabIndex });
        this.setTabWidth(tabsPerPage, tabsPerPage.tabsSmall);
        this.setActivePage(tabs, tabsPerPage.tabsSmall);

        if (tabs.length > tabsPerPage.tabsSmall) return this.showArrows();
        return this.hideArrows();
      }
    }, {
      key: 'viewportMobile',
      value: function viewportMobile(_ref4) {
        var tabsPerPage = _ref4.tabsPerPage;
        var tabs = _ref4.tabs;
        var activeTabIndex = _ref4.activeTabIndex;

        if (tabs.length > tabsPerPage.tabsDefault) {
          this.setTabWidth(tabsPerPage, tabsPerPage.tabsDefault);
          this.setActivePageMobile(activeTabIndex);

          return this.showArrows();
        }
        return this.hideArrows();
      }
    }, {
      key: 'showArrows',
      value: function showArrows() {
        this.setState({
          displayArrows: true
        });
      }
    }, {
      key: 'hideArrows',
      value: function hideArrows() {
        this.setState({
          displayArrows: false
        });
      }
    }, {
      key: 'nextPage',
      value: function nextPage() {
        this.setState({
          activePage: this.state.activePage += 1
        });
      }
    }, {
      key: 'prevPage',
      value: function prevPage() {
        this.setState({
          activePage: this.state.activePage -= 1
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _state = this.state;
        var displayArrows = _state.displayArrows;
        var activePage = _state.activePage;
        var tabsPerPage = _state.tabsPerPage;
        var tabWidth = _state.tabWidth;
        var _props = this.props;
        var tabsVariant = _props.tabsVariant;
        var tabs = _props.tabs;
        var fixedTab = _props.fixedTab;
        var activeTabIndex = _props.activeTabIndex;
        var activeTabContent = _props.activeTabContent;
        var onChange = _props.onChange;
        var newTabAdded = _props.newTabAdded;


        var tabsSliderClass = (0, _classnames2.default)('tabs-slider', { 'has-nav': displayArrows });
        var tabsSliderTabsClass = (0, _classnames2.default)('tabs-slider__tabs', {
          'tabs-slider__tabs--down-arrow': tabsVariant === _Variants.TABS_VARIANT_ARROW,
          'tabs-slider__tabs--underline': tabsVariant === _Variants.TABS_VARIANT_UNDERLINE
        });

        var prevArrowClass = (0, _classnames2.default)('tabs-slider__nav tabs-slider__nav--prev', {
          'is-disabled': activePage === 0
        });
        var nextArrowClass = (0, _classnames2.default)('tabs-slider__nav tabs-slider__nav--next', {
          'is-disabled': activePage === tabs.length - tabsPerPage
        });

        var styleTabWidth = {
          flexBasis: tabWidth + '%',
          width: tabWidth + '%'
        };

        var styleTabsTrack = {
          transform: 'translateX(' + activePage * -tabWidth + '%)'
        };

        var tabHeaders = tabs.map(function (tab, index) {
          var tabsSliderTabClass = (0, _classnames2.default)('tabs-slider__tab', {
            'is-active': index === activeTabIndex,
            'tabs-slider__tab--new': index === tabs.length - 1 && newTabAdded
          });

          return _react2.default.createElement(
            'div',
            _extends({ className: tabsSliderTabClass,
              key: index,
              style: styleTabWidth,
              onClick: function onClick() {
                return onChange(index);
              }
            }, (0, _qa.attr)('tab-item')),
            tab
          );
        });

        return _react2.default.createElement(
          'div',
          { className: 'tabs-slider-container' },
          _react2.default.createElement(
            'div',
            { className: tabsSliderClass },
            _react2.default.createElement(
              'div',
              { className: tabsSliderTabsClass },
              fixedTab,
              _react2.default.createElement(
                'div',
                { className: 'tabs-slider__tabs-track', style: styleTabsTrack },
                tabHeaders
              )
            ),
            tabs.length > tabsPerPage && _react2.default.createElement(
              'div',
              { className: 'tabs-slider__arrows' },
              _react2.default.createElement(
                'div',
                { className: prevArrowClass, onClick: function onClick() {
                    return _this2.prevPage();
                  } },
                _react2.default.createElement('i', { className: 'agi agi agi-double-chevron-left' })
              ),
              _react2.default.createElement(
                'div',
                { className: nextArrowClass, onClick: function onClick() {
                    return _this2.nextPage();
                  } },
                _react2.default.createElement('i', { className: 'agi agi agi-double-chevron-right' })
              )
            )
          ),
          activeTabContent && _react2.default.createElement(
            'div',
            { className: 'tabs-slider__detail' },
            activeTabContent
          )
        );
      }
    }]);

    return TabsMenuSlider;
  }(_react2.default.Component);

  TabsMenuSlider.propTypes = {
    tabs: _react.PropTypes.any.isRequired,
    onChange: _react.PropTypes.func.isRequired,
    activeTabIndex: _react.PropTypes.number,
    activeTabContent: _react.PropTypes.any,
    fixedTab: _react.PropTypes.object,
    tabsVariant: _react.PropTypes.string,
    tabsPerPage: _react.PropTypes.object,
    newTabAdded: _react.PropTypes.bool
  };

  TabsMenuSlider.defaultProps = {
    tabsVariant: _Variants.TABS_VARIANT_UNDERLINE,
    tabsPerPage: {
      tabsLarge: _Breakpoints.TABS_LARGE,
      tabsMedium: _Breakpoints.TABS_MEDIUM,
      tabsSmall: _Breakpoints.TABS_SMALL,
      tabsDefault: _Breakpoints.TABS_DEFAULT
    },
    onChange: function onChange() {}
  };

  exports.default = TabsMenuSlider;
});