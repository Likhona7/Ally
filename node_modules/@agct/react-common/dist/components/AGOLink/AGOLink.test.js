(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['react', 'chai', 'enzyme', 'components/AGOLink/AGOLink', 'chai-enzyme'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('react'), require('chai'), require('enzyme'), require('components/AGOLink/AGOLink'), require('chai-enzyme'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.react, global.chai, global.enzyme, global.AGOLink, global.chaiEnzyme);
    global.AGOLinkTest = mod.exports;
  }
})(this, function (_react, _chai, _enzyme, _AGOLink, _chaiEnzyme) {
  'use strict';

  var _react2 = _interopRequireDefault(_react);

  var _chai2 = _interopRequireDefault(_chai);

  var _AGOLink2 = _interopRequireDefault(_AGOLink);

  var _chaiEnzyme2 = _interopRequireDefault(_chaiEnzyme);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  _chai2.default.use((0, _chaiEnzyme2.default)());

  var linkWithParams = function linkWithParams(params) {
    return _react2.default.createElement(_AGOLink2.default, _extends({
      page: 'example',
      profileType: 'I',
      agoUrl: 'http://example.com'
    }, params));
  };
  describe('AGO Link', function () {
    it('returns correctly encoded frame url when passed name', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_AGOLink2.default, { page: 'example', profileType: 'I', agoUrl: 'http://example.com', name: 'a' }));
      (0, _chai.expect)(wrapper).to.have.text('a');
      (0, _chai.expect)(wrapper.find('a')).to.have.attr('href', 'http://example.com/Oii.aspx?redirect=example&ProfileType=I');
    });

    it('returns correctly encoded frame url when passed children', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _AGOLink2.default,
        { page: 'example', profileType: 'I', agoUrl: 'http://example.com' },
        'example'
      ));
      (0, _chai.expect)(wrapper).to.have.text('example');
      (0, _chai.expect)(wrapper.find('a')).to.have.attr('href', 'http://example.com/Oii.aspx?redirect=example&ProfileType=I');
    });

    it('correctly appends accountId', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ accountId: '123' }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('AccountId=123');
    });

    it('correctly appends investorId', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ investorId: '123' }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('InvestorId=123');
    });

    it('correctly appends profileId', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ profileId: '123' }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('ProfileId=123');
    });

    it('correctly appends startDate as a string', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ startDate: '2016-01-01' }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('StartDate=2016-01-01');
    });

    it('correctly appends endDate as a string', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ endDate: '2016-01-01' }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('EndDate=2016-01-01');
    });

    it('correctly sets data-qa to name', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ name: 'linkName' }));
      (0, _chai.expect)(wrapper.find('a').prop('data-qa')).to.contain('linkName');
    });

    it('correctly appends startDate as a date', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ startDate: new Date('2016-01-01') }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('StartDate=2016-01-01');
    });

    it('correctly appends endDate as a date', function () {
      var wrapper = (0, _enzyme.mount)(linkWithParams({ endDate: new Date('2016-01-01') }));
      (0, _chai.expect)(wrapper.find('a').prop('href')).to.contain('EndDate=2016-01-01');
    });
  });
});