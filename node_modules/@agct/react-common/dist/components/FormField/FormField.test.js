(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['react', 'chai', 'enzyme', 'chai-enzyme', './FormField'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('react'), require('chai'), require('enzyme'), require('chai-enzyme'), require('./FormField'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.react, global.chai, global.enzyme, global.chaiEnzyme, global.FormField);
    global.FormFieldTest = mod.exports;
  }
})(this, function (_react, _chai, _enzyme, _chaiEnzyme, _FormField) {
  'use strict';

  var _react2 = _interopRequireDefault(_react);

  var _chai2 = _interopRequireDefault(_chai);

  var _chaiEnzyme2 = _interopRequireDefault(_chaiEnzyme);

  var _FormField2 = _interopRequireDefault(_FormField);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  _chai2.default.use((0, _chaiEnzyme2.default)());

  describe('FormField component', function () {
    describe('field', function () {
      it('no error is displayed unless error and touched evaluates to true', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {
            onChange: function onChange() {}
          } }));
        (0, _chai.expect)(wrapper.find('.input__error')).to.have.length(0);
      });

      it('display error when error and touched are passed in', function () {
        var error = 'This is an error';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: { error: error, touched: true, onChange: function onChange() {}
          } }));
        (0, _chai.expect)(wrapper.find('.input__error')).to.have.length(1);
      });
    });

    describe('label', function () {
      it('has empty label by default', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {} }));
        (0, _chai.expect)(wrapper.find('label')).to.have.length(0);
      });

      it('can be passed in', function () {
        var label = 'this is a label';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {}, label: label }));
        (0, _chai.expect)(wrapper.find('label').text()).to.equal(label);
      });
    });

    describe('prompt', function () {
      it('has empty prompt by default', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {} }));
        (0, _chai.expect)(wrapper.find('input')).to.not.have.attr('placeholder');
      });

      it('can be passed in', function () {
        var prompt = 'this is a prompt';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {}, prompt: prompt }));
        (0, _chai.expect)(wrapper.find('input')).to.have.attr('placeholder', prompt);
      });
    });

    describe('type', function () {
      it('type is set to text by default', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {} }));
        (0, _chai.expect)(wrapper.find('input')).to.have.attr('type', 'text');
      });

      it('can be passed in', function () {
        var type = 'number';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: {}, type: type }));
        (0, _chai.expect)(wrapper.find('input')).to.have.attr('type', type);
      });
    });

    describe('touched', function () {
      it('touched is not provided to the input component', function () {
        var error = 'This is an error';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: { error: error, touched: true, onChange: function onChange() {}
          } }));
        (0, _chai.expect)(wrapper.find('input')).to.not.have.attr('touched', true);
      });
    });

    describe('error', function () {
      it('error is not provided to the input component', function () {
        var error = 'This is an error';
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_FormField2.default, { field: { error: error, touched: true, onChange: function onChange() {}
          } }));
        (0, _chai.expect)(wrapper.find('input')).to.not.have.attr('error', error);
      });
    });
  });
});