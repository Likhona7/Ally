(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'classnames'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('classnames'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.classnames);
    global.Accordion = mod.exports;
  }
})(this, function (exports, _react, _classnames2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _classnames3 = _interopRequireDefault(_classnames2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Accordion = function (_Component) {
    _inherits(Accordion, _Component);

    function Accordion(props) {
      _classCallCheck(this, Accordion);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Accordion).call(this, props));

      _this.state = _extends({}, props);
      return _this;
    }

    _createClass(Accordion, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.state.height = this.animation.scrollHeight;
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(props) {
        this.setState(_extends({}, props));
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.isOpen !== this.state.isOpen;
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _state = this.state;
        var isOpen = _state.isOpen;
        var className = _state.className;

        var accordionClassName = (0, _classnames3.default)('accordion', _defineProperty({
          'is-open': isOpen,
          'is-closed': !isOpen
        }, className, className));

        return _react2.default.createElement(
          'div',
          { className: accordionClassName },
          _react2.default.createElement(
            'div',
            { className: 'accordion__header' },
            this.state.accordionHeaderTemplate
          ),
          _react2.default.createElement(
            'div',
            { className: 'accordion__body',
              style: { height: isOpen ? this.state.height : 0 },
              ref: function ref(acc) {
                return Object.assign(_this2, { animation: acc });
              }
            },
            this.state.accordionBodyTemplate
          )
        );
      }
    }]);

    return Accordion;
  }(_react.Component);

  Accordion.propTypes = {
    accordionHeaderTemplate: _react.PropTypes.any,
    accordionBodyTemplate: _react.PropTypes.any,
    className: _react.PropTypes.string,
    isOpen: _react.PropTypes.bool
  };

  Accordion.defaultProps = {
    className: ''
  };

  exports.default = Accordion;
});