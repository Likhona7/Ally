(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['chai', 'chai-enzyme', 'sinon-chai', 'moment', './DatepickerUtils', 'moment-range'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('chai'), require('chai-enzyme'), require('sinon-chai'), require('moment'), require('./DatepickerUtils'), require('moment-range'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.chai, global.chaiEnzyme, global.sinonChai, global.moment, global.DatepickerUtils, global.momentRange);
    global.DatepickerUtilsTest = mod.exports;
  }
})(this, function (_chai, _chaiEnzyme, _sinonChai, _moment, _DatepickerUtils) {
  'use strict';

  var _chai2 = _interopRequireDefault(_chai);

  var _chaiEnzyme2 = _interopRequireDefault(_chaiEnzyme);

  var _sinonChai2 = _interopRequireDefault(_sinonChai);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  _moment2.default.updateLocale('en', {
    week: {
      dow: 1 }
  });

  var getTitleDayViewMoment = (0, _DatepickerUtils.getTitleDayView)(_moment2.default);
  var getTitleMonthViewMoment = (0, _DatepickerUtils.getTitleMonthView)(_moment2.default);
  var getTitleYearViewMoment = (0, _DatepickerUtils.getTitleYearView)(_moment2.default);
  var getYearRangeMoment = (0, _DatepickerUtils.getYearRange)(_moment2.default);
  var getDaysMoment = (0, _DatepickerUtils.getDays)(_moment2.default);
  var getMonthsMoment = (0, _DatepickerUtils.getMonths)(_moment2.default);
  var getYearsMoment = (0, _DatepickerUtils.getYears)(_moment2.default);

  _chai2.default.use((0, _chaiEnzyme2.default)());
  _chai2.default.use(_sinonChai2.default);

  describe('Date picker utils', function () {
    var month = 1;
    var year = 2016;

    describe('getTitleDayView', function () {
      it('should return a month year string', function () {
        var expected = 'February 2016';

        (0, _chai.expect)(getTitleDayViewMoment(month, year)).to.equal(expected);
      });
    });

    describe('getTitleMonthView', function () {
      it('a valid year to be returned', function () {
        var expected = '2016';

        (0, _chai.expect)(getTitleMonthViewMoment(year)).to.equal(expected);
      });
    });

    describe('getTitleYearView', function () {
      it('a valid year range to be returned', function () {
        var startYear = '1998';
        var expected = '1998-2016';

        (0, _chai.expect)(getTitleYearViewMoment(startYear, year)).to.equal(expected);
      });
    });

    describe('getYearRange', function () {
      it('a valid year range to be returned', function () {
        var expected = { start: 2009, end: 2020 };

        (0, _chai.expect)(getYearRangeMoment(year).start.year()).to.equal(expected.start);
        (0, _chai.expect)(getYearRangeMoment(year).end.year()).to.equal(expected.end);
      });
    });

    describe('getDays', function () {
      it('a valid days range to be returned', function () {
        var func = getDaysMoment(month, year);
        var expected = { startDate: 1, endDate: 6, calLength: 35 };

        (0, _chai.expect)(func.length).to.equal(expected.calLength);
        (0, _chai.expect)(func[0].date()).to.equal(expected.startDate);
        (0, _chai.expect)(func[expected.calLength - 1].date()).to.equal(expected.endDate);
      });
    });

    describe('getMonths', function () {
      it('a valid months range to be returned', function () {
        var expected = { startMonth: 0, endMonth: 11, calLength: 12 };
        var func = getMonthsMoment(month, year);

        (0, _chai.expect)(func.length).to.equal(expected.calLength);
        (0, _chai.expect)(func[0].month()).to.equal(expected.startMonth);
        (0, _chai.expect)(func[11].month()).to.equal(expected.endMonth);
      });
    });

    describe('getYears', function () {
      it('a valid years range to be returned', function () {
        var func = getYearsMoment(year);
        var expected = { startYear: 2009, endYear: 2020, calLength: 12 };

        (0, _chai.expect)(func.length).to.equal(expected.calLength);
        (0, _chai.expect)(func[0].year()).to.equal(expected.startYear);
        (0, _chai.expect)(func[11].year()).to.equal(expected.endYear);
      });
    });
  });
});