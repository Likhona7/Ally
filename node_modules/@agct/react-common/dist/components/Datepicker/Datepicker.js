(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'lodash', 'classnames', 'moment', './DatepickerUtils', 'moment-range'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('lodash'), require('classnames'), require('moment'), require('./DatepickerUtils'), require('moment-range'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.lodash, global.classnames, global.moment, global.DatepickerUtils, global.momentRange);
    global.Datepicker = mod.exports;
  }
})(this, function (exports, _react, _lodash, _classnames, _moment, _DatepickerUtils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  _moment2.default.updateLocale('en', {
    week: {
      dow: 1 }
  });

  var DAY_RANGE = 'days';
  var MONTH_RANGE = 'months';
  var YEAR_RANGE = 'years';
  var YEAR_COUNT = 12;
  var DAY_TITLES = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];

  var getTitleDayViewMoment = (0, _DatepickerUtils.getTitleDayView)(_moment2.default);
  var getTitleMonthViewMoment = (0, _DatepickerUtils.getTitleMonthView)(_moment2.default);
  var getTitleYearViewMoment = (0, _DatepickerUtils.getTitleYearView)(_moment2.default);
  var getYearRangeMoment = (0, _DatepickerUtils.getYearRange)(_moment2.default);
  var getDaysMoment = (0, _DatepickerUtils.getDays)(_moment2.default);
  var getMonthsMoment = (0, _DatepickerUtils.getMonths)(_moment2.default);
  var getYearsMoment = (0, _DatepickerUtils.getYears)(_moment2.default);

  var Datepicker = function (_React$Component) {
    _inherits(Datepicker, _React$Component);

    function Datepicker(props) {
      _classCallCheck(this, Datepicker);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Datepicker).call(this, props));

      var isVisible = props.isVisible;

      var activeDate = (0, _moment2.default)(props.date || undefined);
      var minDate = props.minDate ? (0, _moment2.default)(props.minDate) : undefined;
      var maxDate = props.maxDate ? (0, _moment2.default)(props.maxDate) : undefined;

      var currentYear = activeDate.year();
      var currentMonth = activeDate.month();
      var currentDay = activeDate.date();

      _this.state = {
        isVisible: isVisible,
        activeDate: activeDate,
        minDate: minDate,
        maxDate: maxDate,
        currentYear: currentYear,
        currentMonth: currentMonth,
        currentDay: currentDay,
        currentRange: DAY_RANGE,
        title: getTitleDayViewMoment(currentMonth, currentYear)
      };
      return _this;
    }

    _createClass(Datepicker, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var activeDate = (0, _moment2.default)(nextProps.date || undefined);
        var minDate = nextProps.minDate ? (0, _moment2.default)(nextProps.minDate) : undefined;
        var maxDate = nextProps.maxDate ? (0, _moment2.default)(nextProps.maxDate) : undefined;

        this.setState({
          activeDate: activeDate,
          minDate: minDate,
          maxDate: maxDate
        });
      }
    }, {
      key: 'getCurrentViewDatesAtIndex',
      value: function getCurrentViewDatesAtIndex(index) {
        var year = (0, _moment2.default)().year(this.state.currentYear);
        var month = year.month(this.state.currentMonth);

        if (this.state.currentRange === YEAR_RANGE) {
          year = getYearsMoment(this.state.currentYear)[index];
          month = getMonthsMoment(year.year())[index];
        }

        if (this.state.currentRange === MONTH_RANGE) {
          month = getMonthsMoment(this.state.currentYear)[index];
        }

        return { year: year, month: month };
      }
    }, {
      key: 'addListener',
      value: function addListener() {
        var _this2 = this;

        return document.addEventListener('mouseup', function (e) {
          return _this2.handleDocumentBlur(e);
        });
      }
    }, {
      key: 'removeListener',
      value: function removeListener() {
        var _this3 = this;

        return document.removeEventListener('mouseup', function (e) {
          return _this3.handleDocumentBlur(e);
        });
      }
    }, {
      key: 'showDatepicker',
      value: function showDatepicker() {
        this.addListener();

        this.setState({
          isVisible: true
        });
      }
    }, {
      key: 'handleDocumentBlur',
      value: function handleDocumentBlur(evt) {
        var _this4 = this;

        var path = [];
        var node = evt.target;

        while (node !== document.body) {
          path.push(node);
          node = node.parentNode;
        }

        var isParent = _lodash2.default.find(path, function (_node) {
          return _node === _this4.uiRef;
        });
        if (!isParent) {
          this.setState({ isVisible: false });
        }
        this.removeListener();
      }
    }, {
      key: 'navigate',
      value: function navigate(amount) {
        var _this5 = this;

        var month = this.state.currentMonth;
        var year = this.state.currentYear;

        if (amount > 0 && this.arrowRightDisableCheck()) return;
        if (amount < 0 && this.arrowLeftDisableCheck()) return;

        var navigateDay = function navigateDay() {
          var nextDate = (0, _moment2.default)().year(year).month(month).add(amount, 'months');
          var nextMonth = nextDate.month();
          var nextYear = nextDate.year();
          _this5.setState({
            currentDay: 1,
            currentMonth: nextMonth,
            currentYear: nextYear,
            title: getTitleDayViewMoment(nextMonth, nextYear)
          });
        };

        var navigateMonth = function navigateMonth() {
          var nextYear = (0, _moment2.default)().year(year).add(amount, 'years').year();
          _this5.setState({
            currentYear: nextYear,
            title: getTitleMonthViewMoment(nextYear)
          });
        };

        var navigateYear = function navigateYear() {
          var nextYear = (0, _moment2.default)().year(year).add(amount * YEAR_COUNT, 'years').year();

          var _getYearRangeMoment = getYearRangeMoment(nextYear);

          var start = _getYearRangeMoment.start;
          var end = _getYearRangeMoment.end;

          _this5.setState({
            currentYear: nextYear,
            title: getTitleYearViewMoment(start.year(), end.year())
          });
        };

        switch (this.state.currentRange) {
          case DAY_RANGE:
            navigateDay();
            break;
          case MONTH_RANGE:
            navigateMonth();
            break;
          case YEAR_RANGE:
            navigateYear();
            break;
          default:
            break;
        }
      }
    }, {
      key: 'changeView',
      value: function changeView() {
        var range = this.state.currentRange;
        var rangeToSet = void 0;
        var titleToSet = void 0;

        if (range === DAY_RANGE) {
          rangeToSet = MONTH_RANGE;
          titleToSet = getTitleMonthViewMoment(this.state.currentYear);
        }
        if (range === MONTH_RANGE || range === YEAR_RANGE) {
          var _getYearRangeMoment2 = getYearRangeMoment(this.state.currentYear);

          var start = _getYearRangeMoment2.start;
          var end = _getYearRangeMoment2.end;

          rangeToSet = YEAR_RANGE;
          titleToSet = getTitleYearViewMoment(start.year(), end.year());
        }

        this.setState({
          currentRange: rangeToSet,
          title: titleToSet
        });
      }
    }, {
      key: 'dayDisableCheck',
      value: function dayDisableCheck(date) {
        return this.state.minDate && date.isBefore(this.state.minDate, 'day') || this.state.maxDate && date.isAfter(this.state.maxDate, 'day');
      }
    }, {
      key: 'currentDate',
      value: function currentDate() {
        return (0, _moment2.default)({
          year: this.state.currentYear,
          month: this.state.currentMonth,
          date: this.state.currentDay
        });
      }
    }, {
      key: 'dayInactiveCheck',
      value: function dayInactiveCheck(date) {
        return !date.isSame(this.currentDate(), 'month');
      }
    }, {
      key: 'monthDisableCheck',
      value: function monthDisableCheck(date) {
        return this.state.minDate && date.isBefore(this.state.minDate, 'month') || this.state.maxDate && date.isAfter(this.state.maxDate, 'month');
      }
    }, {
      key: 'yearDisableCheck',
      value: function yearDisableCheck(date) {
        return this.state.minDate && date.isBefore(this.state.minDate, 'year') || this.state.maxDate && date.isAfter(this.state.maxDate, 'year');
      }
    }, {
      key: 'arrowLeftDisableCheck',
      value: function arrowLeftDisableCheck() {
        var _getCurrentViewDatesA = this.getCurrentViewDatesAtIndex(0);

        var year = _getCurrentViewDatesA.year;
        var month = _getCurrentViewDatesA.month;


        return this.state.minDate && year.isSameOrBefore(this.state.minDate, 'year') && month.isSameOrBefore(this.state.minDate, 'month');
      }
    }, {
      key: 'arrowRightDisableCheck',
      value: function arrowRightDisableCheck() {
        var _getCurrentViewDatesA2 = this.getCurrentViewDatesAtIndex(YEAR_COUNT - 1);

        var year = _getCurrentViewDatesA2.year;
        var month = _getCurrentViewDatesA2.month;


        return this.state.maxDate && year.isSameOrAfter(this.state.maxDate, 'year') && month.isSameOrAfter(this.state.maxDate, 'month');
      }
    }, {
      key: 'selectDay',
      value: function selectDay(date) {
        var activeDate = date;
        var currentYear = activeDate.year();
        var currentMonth = activeDate.month();
        var currentDay = activeDate.date();

        if (this.dayDisableCheck(date)) return;
        if (this.dayInactiveCheck(date)) {
          this.setState({
            title: getTitleDayViewMoment(currentMonth, currentYear)
          });
        }

        this.setState({
          activeDate: activeDate,
          currentYear: currentYear,
          currentMonth: currentMonth,
          currentDay: currentDay,
          isVisible: false
        });

        this.props.onChange(date);
        this.removeListener();
      }
    }, {
      key: 'selectMonth',
      value: function selectMonth(date) {
        var month = date.month();

        if (this.monthDisableCheck(date)) return;
        this.setState({
          currentRange: DAY_RANGE,
          currentMonth: month,
          title: getTitleDayViewMoment(month, this.state.currentYear)
        });
      }
    }, {
      key: 'selectYear',
      value: function selectYear(date) {
        var year = date.year();

        if (this.yearDisableCheck(date)) return;
        this.setState({
          currentRange: MONTH_RANGE,
          currentYear: year,
          title: getTitleMonthViewMoment(year)
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _this6 = this;

        var isDisabled = this.props.isDisabled;

        var disableLeftArrowClass = (0, _classnames2.default)('datepicker__button datepicker__button--prev', {
          'is-disabled': this.arrowLeftDisableCheck()
        });

        var disableRightArrowClass = (0, _classnames2.default)('datepicker__button datepicker__button--next', {
          'is-disabled': this.arrowRightDisableCheck()
        });

        var fullClassName = (0, _classnames2.default)('datepicker-wrap', {
          'is-open': this.state.isVisible,
          'dark-theme': this.props.theme === 'dark'
        });

        return _react2.default.createElement(
          'div',
          { ref: function ref(_ref) {
              return _this6.uiRef = _ref;
            }, className: fullClassName },
          _react2.default.createElement(
            'div',
            { className: 'dropdown' },
            _react2.default.createElement(
              'div',
              { className: 'btn dropdown__toggle qa-datepicker-toggle',
                placeholder: 'Datepicker',
                onClick: function onClick() {
                  return !isDisabled && _this6.showDatepicker();
                },
                disabled: isDisabled
              },
              _react2.default.createElement(
                'span',
                { className: 'dropdown__title' },
                this.state.activeDate.format('DD MMM YYYY')
              ),
              _react2.default.createElement('i', { className: 'agi agi-calendar color-primary' })
            )
          ),
          this.state.isVisible && _react2.default.createElement(
            'div',
            { className: 'datepicker' },
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'button',
                { className: disableLeftArrowClass, type: 'button', onClick: function onClick() {
                    return _this6.navigate(-1);
                  } },
                '«'
              ),
              _react2.default.createElement(
                'span',
                { className: 'datepicker__title', onClick: function onClick() {
                    return _this6.changeView();
                  } },
                this.state.title
              ),
              _react2.default.createElement(
                'button',
                { className: disableRightArrowClass, type: 'button', onClick: function onClick() {
                    return _this6.navigate(1);
                  } },
                '»'
              )
            ),
            _react2.default.createElement(
              'div',
              null,
              this.state.currentRange === YEAR_RANGE && _react2.default.createElement(
                'ul',
                { className: 'datepicker__calendar' },
                getYearsMoment(this.state.currentYear).map(function (date, index) {
                  var formattedDate = date.format('YYYY');
                  var baseClass = (0, _classnames2.default)('datepicker__calendar__item datepicker__calendar__item--year', {
                    'is-disabled': _this6.yearDisableCheck(date),
                    'is-active': date.isSame(_this6.state.activeDate, 'year')
                  });
                  return _react2.default.createElement(
                    'li',
                    { key: index, onClick: function onClick() {
                        return _this6.selectYear(date);
                      }, className: baseClass },
                    formattedDate
                  );
                })
              ),
              this.state.currentRange === MONTH_RANGE && _react2.default.createElement(
                'ul',
                { className: 'datepicker__calendar' },
                getMonthsMoment(this.state.currentYear).map(function (date, index) {
                  var formattedDate = date.format('MMM');
                  var baseClass = (0, _classnames2.default)('datepicker__calendar__item datepicker__calendar__item--month', {
                    'is-disabled': _this6.monthDisableCheck(date),
                    'is-active': date.isSame(_this6.state.activeDate, 'month')
                  });
                  return _react2.default.createElement(
                    'li',
                    { key: index, onClick: function onClick() {
                        return _this6.selectMonth(date);
                      }, className: baseClass },
                    formattedDate
                  );
                })
              ),
              this.state.currentRange === DAY_RANGE && _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                  'ul',
                  { className: 'datepicker__calendar datepicker__calendar--titles' },
                  DAY_TITLES.map(function (day) {
                    return _react2.default.createElement(
                      'li',
                      { className: 'datepicker__calendar__item datepicker__calendar__item--title',
                        key: day
                      },
                      day
                    );
                  })
                ),
                _react2.default.createElement(
                  'ul',
                  { className: 'datepicker__calendar' },
                  getDaysMoment(this.state.currentMonth, this.state.currentYear).map(function (date, index) {
                    var formattedDate = date.format('D');
                    var baseClass = (0, _classnames2.default)('datepicker__calendar__item datepicker__calendar__item--day', {
                      'is-inactive': _this6.dayInactiveCheck(date),
                      'is-disabled': _this6.dayDisableCheck(date),
                      'is-active': date.isSame(_this6.state.activeDate, 'day')
                    });
                    return _react2.default.createElement(
                      'li',
                      { key: index, onClick: function onClick() {
                          return _this6.selectDay(date);
                        }, className: baseClass },
                      formattedDate
                    );
                  })
                )
              )
            )
          )
        );
      }
    }]);

    return Datepicker;
  }(_react2.default.Component);

  Datepicker.propTypes = {
    theme: _react.PropTypes.string,
    date: _react.PropTypes.string,
    minDate: _react.PropTypes.string,
    maxDate: _react.PropTypes.string,
    isVisible: _react.PropTypes.bool,
    isDisabled: _react.PropTypes.bool,
    onChange: _react.PropTypes.func
  };

  Datepicker.defaultProps = {
    isDisabled: false,
    onChange: function onChange() {}
  };

  exports.default = Datepicker;
});