(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'exenv', 'classnames'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('exenv'), require('classnames'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.exenv, global.classnames);
    global.UIWrapper = mod.exports;
  }
})(this, function (exports, _react, _exenv, _classnames) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _classnames2 = _interopRequireDefault(_classnames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var UIWrapper = function UIWrapper(WrappedComponent) {
    return function (_Component) {
      _inherits(_class, _Component);

      function _class(props) {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this, props));

        _this.state = {
          isOpen: false
        };

        _this.handleDocumentBlur = _this.handleDocumentBlur.bind(_this);

        _this.toggle = _this.toggle.bind(_this);
        _this.open = _this.open.bind(_this);
        _this.close = _this.close.bind(_this);
        return _this;
      }

      _createClass(_class, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          if (_exenv.canUseEventListeners) {
            document.addEventListener('mouseup', this.handleDocumentBlur);
            window.addEventListener('resize', this.handleDocumentBlur);
            window.addEventListener('scroll', this.handleDocumentBlur);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (_exenv.canUseEventListeners) {
            document.removeEventListener('mouseup', this.handleDocumentBlur);
            window.removeEventListener('resize', this.handleDocumentBlur);
            window.removeEventListener('scroll', this.handleDocumentBlur);
          }
        }
      }, {
        key: 'handleDocumentBlur',
        value: function handleDocumentBlur(evt) {
          var isParent = this.uiRef.contains(evt.target);
          if (!isParent) {
            this.setState({ isOpen: false });
          }
        }
      }, {
        key: 'toggle',
        value: function toggle() {
          this.setState({
            isOpen: !this.state.isOpen
          });
        }
      }, {
        key: 'open',
        value: function open() {
          this.setState({
            isOpen: true
          });
        }
      }, {
        key: 'close',
        value: function close() {
          this.setState({
            isOpen: false
          });
        }
      }, {
        key: 'render',
        value: function render() {
          var _this2 = this;

          var className = (0, _classnames2.default)({
            'is-open': this.state.isOpen
          });

          var ui = {
            isOpen: this.state.isOpen,
            toggle: this.toggle,
            open: this.open,
            close: this.close
          };

          return _react2.default.createElement(
            'div',
            { ref: function ref(_ref) {
                _this2.uiRef = _ref;
              }, className: className },
            _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
              ui: ui
            }))
          );
        }
      }]);

      return _class;
    }(_react.Component);
  };

  exports.default = UIWrapper;
});