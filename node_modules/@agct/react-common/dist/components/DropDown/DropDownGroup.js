(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'lodash', 'classnames', '../UIWrapper/UIWrapper', './DropDownUtils', '@agct/reacceptance/src/qa'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('lodash'), require('classnames'), require('../UIWrapper/UIWrapper'), require('./DropDownUtils'), require('@agct/reacceptance/src/qa'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.lodash, global.classnames, global.UIWrapper, global.DropDownUtils, global.qa);
    global.DropDownGroup = mod.exports;
  }
})(this, function (exports, _react, _lodash, _classnames, _UIWrapper, _DropDownUtils, _qa) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _UIWrapper2 = _interopRequireDefault(_UIWrapper);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var DropDown = function (_Component) {
    _inherits(DropDown, _Component);

    function DropDown(props) {
      _classCallCheck(this, DropDown);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DropDown).call(this, props));

      _this.handleToggle = _this.handleToggle.bind(_this);
      _this.handleSelect = _this.handleSelect.bind(_this);
      return _this;
    }

    _createClass(DropDown, [{
      key: 'handleToggle',
      value: function handleToggle(evt) {
        evt.preventDefault();

        this.props.onFocus();
        this.props.ui.toggle();
      }
    }, {
      key: 'handleSelect',
      value: function handleSelect(item) {
        var value = item.value || item || null;

        this.props.onChange(value);
        this.props.ui.close();
      }
    }, {
      key: 'render',
      value: function render() {
        var selectedItem = this.props.value ? _lodash2.default.chain(this.props.groups).flatMap('items').find({ value: this.props.value }).value() : null;

        var prompt = selectedItem ? selectedItem.label : this.props.prompt;

        var blankOption = this.props.withBlank && (0, _DropDownUtils.buildBlankOption)(this.handleSelect);
        var groupOptions = this.props.groups && (0, _DropDownUtils.buildGroupOptions)(this.props.groups, selectedItem, this.handleSelect);

        var optionsCssClasses = (0, _classnames2.default)('dropdown__options', {
          'is-open': this.props.ui.isOpen
        });

        return _react2.default.createElement(
          'div',
          { className: 'dropdown' },
          _react2.default.createElement(
            'button',
            _extends({
              className: 'btn dropdown__toggle',
              onClick: this.handleToggle
            }, (0, _qa.attr)('dropdown')),
            _react2.default.createElement(
              'span',
              { className: 'dropdown__title' },
              prompt
            ),
            _react2.default.createElement('i', { className: 'agi agi-chevron-down-fat' })
          ),
          _react2.default.createElement(
            'div',
            { className: optionsCssClasses },
            blankOption,
            groupOptions
          )
        );
      }
    }]);

    return DropDown;
  }(_react.Component);

  DropDown.propTypes = {
    prompt: _react.PropTypes.string,
    withBlank: _react.PropTypes.bool,
    groups: _react.PropTypes.array,

    /*
      // Example of `groups` property:
      [
        {
          label: 'Currency',
          items: [
            { value: 'GBP', label: 'Pounds', disabled: true },
            { value: 'USD', label: 'Dollars' },
            { value: 'EUR', label: 'Euro' },
          ],
        },
        {
          label: 'Colours',
          items: [
            { value: 'RED', label: 'red', disabled: true },
            { value: 'GREEN', label: 'green' },
            { value: 'BLUE', label: 'blue' },
          ],
        },
        {
          label: 'Cars',
          items: [
            { value: 'MERC', label: 'Merc', disabled: true },
            { value: 'BMW', label: 'BMW' },
            { value: 'AUDI', label: 'Audi' },
          ],
        },
      ]
    */

    /* reduxForm */
    value: _react.PropTypes.string,
    initialValue: _react.PropTypes.string,
    onChange: _react.PropTypes.func.isRequired,
    onFocus: _react.PropTypes.func.isRequired,

    /* uiWrapper */
    ui: _react.PropTypes.object.isRequired
  };

  DropDown.defaultProps = {
    prompt: 'Please select a value',
    withBlank: true
  };

  exports.default = (0, _UIWrapper2.default)(DropDown);
});