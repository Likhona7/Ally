(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.isSouthAfricanId = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  var ID_LENGTH = 13;

  var convertNumberToString = function convertNumberToString(number) {
    return '' + number;
  };
  var getLastCharacter = function getLastCharacter(string) {
    return string.slice(-1);
  };
  var getAllCharactersExceptLast = function getAllCharactersExceptLast(string) {
    return string.slice(0, -1);
  };
  var convertStringToArray = function convertStringToArray(string) {
    return Array.from(string);
  };
  var add = function add() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.reduce(function (a, b) {
      return Number(a) + Number(b);
    }, 0);
  };
  var addAllInArray = function addAllInArray(array) {
    return add.apply(undefined, _toConsumableArray(array));
  };
  var isDivisibleByTwo = function isDivisibleByTwo(number) {
    return number % 2 === 0;
  };
  var getOddIndexesInArray = function getOddIndexesInArray(array) {
    return array.filter(function (x, i) {
      return !isDivisibleByTwo(i + 1);
    });
  };
  var getEvenIndexesInArray = function getEvenIndexesInArray(array) {
    return array.filter(function (x, i) {
      return isDivisibleByTwo(i + 1);
    });
  };
  var convertArrayToString = function convertArrayToString(array) {
    return array.join('');
  };
  var convertStringToNumber = function convertStringToNumber(string) {
    return Number(string);
  };
  var multiplyByTwo = function multiplyByTwo(number) {
    return number * 2;
  };
  var subtractTen = function subtractTen(number) {
    return Number(number) - 10;
  };

  var compose = function compose() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return function (value) {
      return args.reduce(function (a, b) {
        return b(a);
      }, value);
    };
  };

  var getControlDigit = function getControlDigit(id) {
    return compose(convertNumberToString, getLastCharacter)(id);
  };

  var getOddIndexCalculatedValue = function getOddIndexCalculatedValue(id) {
    return compose(convertNumberToString, getAllCharactersExceptLast, convertStringToArray, getOddIndexesInArray, addAllInArray)(id);
  };

  var getEvenIndexCalculatedValue = function getEvenIndexCalculatedValue(id) {
    return compose(convertNumberToString, convertStringToArray, getEvenIndexesInArray, convertArrayToString, convertStringToNumber, multiplyByTwo, convertNumberToString, convertStringToArray, addAllInArray)(id);
  };

  var getCheckDigit = function getCheckDigit() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return compose(addAllInArray, convertNumberToString, getLastCharacter, subtractTen, convertNumberToString, getLastCharacter)(args);
  };

  var validate = function validate(id) {
    var idLength = convertNumberToString(id).length;

    if (!(id && idLength === ID_LENGTH)) return false;

    var controlDigit = getControlDigit(id);
    var oddIndexCalculatedValue = getOddIndexCalculatedValue(id);
    var evenIndexCalculatedValue = getEvenIndexCalculatedValue(id);
    var checkDigit = getCheckDigit(oddIndexCalculatedValue, evenIndexCalculatedValue);

    return controlDigit === checkDigit;
  };

  exports.ID_LENGTH = ID_LENGTH;
  exports.validate = validate;
  exports.default = validate;
});