(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'accounting', 'lodash'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('accounting'), require('lodash'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.accounting, global.lodash);
    global.money = mod.exports;
  }
})(this, function (exports, _accounting, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.formatMoneyDestructured = exports.formatMoneyWithCode = exports.formatMoneyWithSymbol = exports.formatMoney = exports.fixCurrencyCode = exports.defaultCurrencyOptions = exports.currencyISOCodesToUnicode = exports.YEN_FLEX_CODE = exports.AUD_ISO_CODE = exports.ZAR_ISO_CODE = exports.JPY_ISO_CODE = exports.EUR_ISO_CODE = exports.GBP_ISO_CODE = exports.USD_ISO_CODE = undefined;

  var _accounting2 = _interopRequireDefault(_accounting);

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _currencyISOCodesToUn;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var USD_ISO_CODE = exports.USD_ISO_CODE = 'USD';
  var GBP_ISO_CODE = exports.GBP_ISO_CODE = 'GBP';
  var EUR_ISO_CODE = exports.EUR_ISO_CODE = 'EUR';
  var JPY_ISO_CODE = exports.JPY_ISO_CODE = 'JPY';
  var ZAR_ISO_CODE = exports.ZAR_ISO_CODE = 'ZAR';
  var AUD_ISO_CODE = exports.AUD_ISO_CODE = 'AUD';
  var YEN_FLEX_CODE = exports.YEN_FLEX_CODE = 'YEN'; // special case

  var currencyISOCodesToUnicode = exports.currencyISOCodesToUnicode = (_currencyISOCodesToUn = {}, _defineProperty(_currencyISOCodesToUn, USD_ISO_CODE, '$'), _defineProperty(_currencyISOCodesToUn, GBP_ISO_CODE, '£'), _defineProperty(_currencyISOCodesToUn, EUR_ISO_CODE, '€'), _defineProperty(_currencyISOCodesToUn, JPY_ISO_CODE, '¥'), _defineProperty(_currencyISOCodesToUn, ZAR_ISO_CODE, 'R'), _defineProperty(_currencyISOCodesToUn, AUD_ISO_CODE, 'A$'), _currencyISOCodesToUn);

  var defaultCurrencyOptions = exports.defaultCurrencyOptions = {
    symbol: 'R',
    decimal: '.',
    thousand: ' ',
    precision: 2,
    format: {
      pos: '%s %v',
      neg: '%s-%v',
      zero: '%s %v'
    }
  };

  var fixCurrencyCode = exports.fixCurrencyCode = function fixCurrencyCode(currencyCode) {
    if (YEN_FLEX_CODE === currencyCode) {
      return JPY_ISO_CODE;
    }
    return currencyCode;
  };

  var formatMoney = exports.formatMoney = function formatMoney(number) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    return _accounting2.default.formatMoney(number, _extends({}, defaultCurrencyOptions, options));
  };

  var formatMoneyWithSymbol = exports.formatMoneyWithSymbol = function formatMoneyWithSymbol(number, currencyCode) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var isoCode = fixCurrencyCode(currencyCode);
    var symbol = _lodash2.default.get(currencyISOCodesToUnicode, isoCode) || isoCode || defaultCurrencyOptions.symbol;

    return formatMoney(number, _extends({
      symbol: symbol
    }, options));
  };

  var formatMoneyWithCode = exports.formatMoneyWithCode = function formatMoneyWithCode(number, currencyCode) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var isoCode = fixCurrencyCode(currencyCode);

    return formatMoney(number, _extends({
      symbol: isoCode
    }, options));
  };

  var formatMoneyDestructured = exports.formatMoneyDestructured = function formatMoneyDestructured(number, currencyCode) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var money = formatMoney(number, _extends({
      symbol: ''
    }, options));

    var isoCode = fixCurrencyCode(currencyCode);
    var symbol = _lodash2.default.get(currencyISOCodesToUnicode, isoCode, isoCode);

    var _defaultCurrencyOptio = _extends({}, defaultCurrencyOptions, options);

    var decimal = _defaultCurrencyOptio.decimal;

    var _money$split = money.split(decimal);

    var _money$split2 = _slicedToArray(_money$split, 2);

    var units = _money$split2[0];
    var cents = _money$split2[1];

    var isNegative = number < 0;

    return {
      isoCode: isoCode,
      symbol: symbol,
      decimal: decimal,
      units: units,
      cents: cents,
      isNegative: isNegative
    };
  };
});